{"version":3,"file":"component---src-pages-contributions-mdx-5e40cfa3eea67c20cfb3.js","mappings":"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","sources":["webpack://example/./src/pages/contributions.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst AnchorLinks = makeShortcode(\"AnchorLinks\");\nconst AnchorLink = makeShortcode(\"AnchorLink\");\nconst Title = makeShortcode(\"Title\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <PageDescription mdxType=\"PageDescription\">\n      <p>{`Use this guide to contribute to the theme. We’ll show you how to get the development environment set up as quickly as possible so you can start contributing.`}</p>\n    </PageDescription>\n    <AnchorLinks mdxType=\"AnchorLinks\">\n  <AnchorLink mdxType=\"AnchorLink\">Project setup</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Development</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Work in a branch</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Sass and CSS Modules</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">VS Code</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Test pages</AnchorLink>\n  <AnchorLink mdxType=\"AnchorLink\">Publishing</AnchorLink>\n    </AnchorLinks>\n    <h2>{`Project setup`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Go to `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/carbon-design-system/gatsby-theme-carbon\"\n          }}>{`gatsby-theme-carbon`}</a>{` and click the `}<inlineCode parentName=\"p\">{`Fork`}</inlineCode>{` button in the top-right corner.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`After it’s finished, click on the `}<inlineCode parentName=\"p\">{`Clone or Download`}</inlineCode>{` button and copy the contents.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your terminal, clone the repo into your directory of choice`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`When you clone your forked repo the `}<inlineCode parentName=\"p\">{`origin`}</inlineCode>{` is set to your fork by default. You’ll want to add a remote that points to the upstream repo.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your terminal, verify that the remotes have been set`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-sh\"\n          }}>{`git remote -v\n`}</code></pre>\n      </li>\n    </ol>\n    <h2>{`Development`}</h2>\n    <p>{`We use `}<a parentName=\"p\" {...{\n        \"href\": \"https://yarnpkg.com/lang/en/docs/install/\"\n      }}>{`yarn`}</a>{` and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that’s closely linked to the theme with minimal setup. Run `}<inlineCode parentName=\"p\">{`yarn install`}</inlineCode>{` to install all of the projects dependencies.`}</p>\n    <p>{`This project has two packages: the actual theme package (`}<inlineCode parentName=\"p\">{`gatsby-theme-carbon`}</inlineCode>{`) and the `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The `}<inlineCode parentName=\"p\">{`example`}</inlineCode>{` package also serves as the theme’s documentation and `}<a parentName=\"p\" {...{\n        \"href\": \"https://gatsby-theme-carbon.now.sh\"\n      }}>{`website`}</a>{`; it’s deployed on every merge to master.`}</p>\n    <p>{`New theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory.`}</p>\n    <Title mdxType=\"Title\">Development scripts</Title>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev`}</inlineCode>{` – start the development environment`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn dev:clean`}</inlineCode>{` – clear cache and restart dev`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn format`}</inlineCode>{` – format your code with prettier`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn lint`}</inlineCode>{` - check for errors in your javascript`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn test:prefix`}</inlineCode>{` – build and serve with a path prefix`}</li>\n    </ul>\n    <h2>{`Work in a branch`}</h2>\n    <p>{`You should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don’t accidentally commit anything to your master branch and get stuck when trying to open a pull request.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git checkout master\ngit pull upstream master\ngit checkout -b my-branch-name\n`}</code></pre>\n    <p>{`When you’re ready to open a pull request, push to your origin remote.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`git push origin my-branch-name\n`}</code></pre>\n    <p>{`You’ll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.`}</p>\n    <h2>{`Sass and CSS Modules`}</h2>\n    <p>{`For internal theme components we use `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation/syntax\"\n      }}>{`Sass`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#css-modules\"\n      }}>{`CSS Modules`}</a>{`. This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file will be supplied with all of the Carbon Sass `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss\"\n      }}>{`variables`}</a>{`: color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.`}</p>\n    <p>{`You should colocate your stylesheet with the component(s) that import it. If the component is `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` then the stylesheet should be `}<inlineCode parentName=\"p\">{`TreeView.module.scss`}</inlineCode>{`. All contained within the `}<inlineCode parentName=\"p\">{`TreeView`}</inlineCode>{` directory.`}</p>\n    <h3>{`CSS Modules`}</h3>\n    <p>{`You don’t need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the `}<inlineCode parentName=\"p\">{`.scss`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\",\n        \"metastring\": \"path=TreeView.module.scss\",\n        \"path\": \"TreeView.module.scss\"\n      }}>{`.treeView {\n  color: $text-01;\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;\n`}</code></pre>\n    <p>{`For conditionally applying class names, use the `}<inlineCode parentName=\"p\">{`classname`}</inlineCode>{` library. Note how we’re using a `}<a parentName=\"p\" {...{\n        \"href\": \"https://tylermcginnis.com/computed-property-names/\"\n      }}>{`computed property name`}</a>{` for the property being based to `}<inlineCode parentName=\"p\">{`cx`}</inlineCode>{`. That’s because the className isn’t literally `}<inlineCode parentName=\"p\">{`\"long\"`}</inlineCode>{` it’s a value generated by CSS Modules and placed in the `}<inlineCode parentName=\"p\">{`long`}</inlineCode>{` variable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"path=TreeView.js\",\n        \"path\": \"TreeView.js\"\n      }}>{`import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};\n`}</code></pre>\n    <p>{`If you need to target a global class not processed by CSS Modules, you can do so with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/css-modules#exceptions\"\n      }}>{`global selector`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`:global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n`}</code></pre>\n    <h2>{`VS Code`}</h2>\n    <p>{`To get linting error feedback while writing javascript and SCSS in VS Code, install the `}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint\"\n      }}>{`stylelint`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\"\n      }}>{`ESlint`}</a>{` extensions. We use ESLint’s Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a `}<inlineCode parentName=\"p\">{`.vscode/settings.json`}</inlineCode>{` in the root of your project`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/settings.json\",\n        \"path\": \".vscode/settings.json\"\n      }}>{`{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n`}</code></pre>\n    <p>{`To lint the entire project and get errors in your `}<inlineCode parentName=\"p\">{`Problems`}</inlineCode>{` tray, you can add the following to a `}<inlineCode parentName=\"p\">{`.vscode/tasks.json`}</inlineCode>{` file in the root of your project. You can run these tasks with `}<inlineCode parentName=\"p\">{`cmd+shift+d`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"metastring\": \"path=.vscode/tasks.json\",\n        \"path\": \".vscode/tasks.json\"\n      }}>{`{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"\\${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\\\\\s+(\\\\\\\\d+):(\\\\\\\\d+)\\\\\\\\s+(✖|warning)\\\\\\\\s+(.*)\\\\\\\\s\\\\\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n`}</code></pre>\n    <h2>{`Test pages`}</h2>\n    <p>{`If you want to add examples of what you are working on or see changes you’ve made, you can add an MDX file to `}<inlineCode parentName=\"p\">{`packages/src/pages/test`}</inlineCode>{` that will be visible at `}<inlineCode parentName=\"p\">{`(your-server-name)/test/(added-file)`}</inlineCode>{` during development. If you do add a page to the `}<inlineCode parentName=\"p\">{`/test`}</inlineCode>{` directory, update the below list with the file you added and its purpose to be included with your pull request.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/test/spacing-audit\"\n        }}><inlineCode parentName=\"a\">{`Spacing audit`}</inlineCode></a>{`: use this page to test spacing around components when combined in common patterns.`}</li>\n    </ul>\n    <h2>{`Publishing`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`figure out if it’s patch or feature`}</li>\n      <li parentName=\"ol\">{`from the root of the package run `}<inlineCode parentName=\"li\">{`lerna publish patch`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`lerna publish minor`}</inlineCode></li>\n      <li parentName=\"ol\">{`git push upstream master —follow-tags`}</li>\n      <li parentName=\"ol\">{`In the project’s `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/carbon-design-system/gatsby-theme-carbon/releases\"\n        }}>{`release tab`}</a>{`, edit the new release to include a summary of new changes`}</li>\n    </ol>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","PageDescription","AnchorLinks","AnchorLink","Title","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}