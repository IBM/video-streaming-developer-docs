{"version":3,"file":"component---src-pages-api-basics-testing-apis-mdx-733f68b285a2c9b1687d.js","mappings":"4LAUsBA,E,6DAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKM,QALE,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,gEACA,QAACT,EAAD,CAAOS,QAAQ,SAAf,wBACA,oNAAsM,kBAAQC,WAAW,KAAnB,iDAAtM,gJACA,oBAAK,gBAAMA,WAAW,OAAjB,mNAOL,+PAAiP,sBAAYA,WAAW,KAAvB,oEACjP,QAACV,EAAD,CAAOS,QAAQ,SAAf,4BACA,oBAAK,gBAAMC,WAAW,OAAjB,oNAOL,oBAAK,gBAAMA,WAAW,OAAjB,sJAMR,CAEDH,EAAWI,gBAAiB,C","sources":["webpack://example/./src/pages/api-basics-testing-apis.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Title = makeShortcode(\"Title\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Test an API from command line (with curl)`}</h2>\n    <Title mdxType=\"Title\">Get an access token</Title>\n    <p>{`The simplest way to obtain an access token for testing purposes is to use the implicit OAuth 2.0 flow. This flow allows clients to get access tokens directly from the auth endpoint. However, `}<strong parentName=\"p\">{`for production purposes it is not recommended`}</strong>{` due to the inherent risks of returning access tokens in an HTTP redirect without any confirmation that it has been received by the client.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`https://authentication.video.ibm.com/authorize\n?response_type=token\n&client_id=057ce944b015ec9fdf546dfbbe1b7af4b19e8158\n&redirect_uri=https://yourdomain.com/redirect\n&device_name=MyDevice\n&state=XYZ\n`}</code></pre>\n    <p>{`After logging in, the browser is redirected to a special URL (defined by the client), passing the Access Token in the URL. As you can see in the examples below, you should use Authorization HTTP header with the token in the requests: `}<inlineCode parentName=\"p\">{`Authorization: Bearer 3c2573673b782f6544405a22636f3d5d3b6f3950`}</inlineCode></p>\n    <Title mdxType=\"Title\">Create a channel (POST)</Title>\n    <pre><code parentName=\"pre\" {...{}}>{`curl \\\\\n    -i \\\\\n    -X POST \\\\\n    -H \"Authorization: Bearer 3c2573673b782f6544405a22636f3d5d3b6f3950\" \\\\\n    -d \"title=Whatever+Test+1234\" \\\\\n    https://api.video.ibm.com/users/self/channels.json\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`HTTP/1.1 201 Created\n\n{\"channel\":{\"id\":\"13091307\",\"title\":\"Whatever Test 1234\",\"url\":\"whatever-test-1234\",\"tiny_url\":\"http://ustre.am/SVE7\"}}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Title","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}