{"version":3,"file":"component---src-pages-broadcaster-sdk-android-aux-features-mdx-5eb6bf4761a98a718815.js","mappings":"4LAUsBA,E,6DAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKmB,qBALX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,QAACT,EAAD,CAAoBU,KAAK,UAAUD,QAAQ,uBACzC,kdAAoc,aAAGE,WAAW,IAC9c,KAAQ,gGADwb,kBAApc,OAIF,qCACA,oNACA,sDAAwC,kBAAQA,WAAW,KAAnB,kBAAxC,wDAAkJ,kBAAQA,WAAW,KAAnB,YAAlJ,yZAIA,oKAAsJ,aAAGA,WAAW,IAChK,KAAQ,6CAD0I,mBAAtJ,6BAEyD,aAAGA,WAAW,IACnE,KAAQ,uBAD6C,qBAFzD,+KAMA,kBAAG,kBAAQA,WAAW,KAAnB,iDAAH,MACA,mBACE,cAAIA,WAAW,MAAf,mCACA,cAAIA,WAAW,MAAf,6CAAiE,sBAAYA,WAAW,MAAvB,eACjE,cAAIA,WAAW,MAAf,oDACA,cAAIA,WAAW,MAAf,mDACA,cAAIA,WAAW,MAAf,gHAEF,yHAA2G,cAAIA,WAAW,KAAf,2BAA3G,2IACsE,aAAGA,WAAW,IAChF,KAAQ,8DAD0D,sBADtE,SAGwC,aAAGA,WAAW,IAClD,KAAQ,2DAD4B,0BAHxC,MAMA,uHAAyG,aAAGA,WAAW,IACnH,KAAQ,yEAD6F,mCAAzG,KAKH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://example/./src/pages/broadcaster-sdk-android/aux-features.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Please note that as of November 1st, 2022 IBM has discontinued support for the Video Streaming Broadcaster SDK. It will not receive updates or technical support and may not fully function. For SDKs you have already downloaded, please do not use them to build applications to access the broadcasting functionality, and delete them from your archives. You may find information on alternative methods to broadcast live video to your channel on our `}<a parentName=\"p\" {...{\n          \"href\": \"https://support.video.ibm.com/hc/en-us/categories/200545448-Broadcasting-on-IBM-Watson-Media\"\n        }}>{`Support Center`}</a>{`.`}</p>\n    </InlineNotification>\n    <h2>{`Authentication`}</h2>\n    <p>{`IBM Video Streaming SDK usage requires users to authenticate with an IBM ID or a legacy Ustream account to get access to SDK and IBM Channel API features for example broadcasting or listing.`}</p>\n    <p>{`The authentication happens using `}<strong parentName=\"p\">{`OpenID Connect`}</strong>{` which in turn handles the authorization part using `}<strong parentName=\"p\">{`OAuth2.0`}</strong>{` protocol.\nEarlier versions of the SDK had provided a custom in-house implementation of the above two protocolâ€™s Authorization Code flow.\nHowever with the introduction of version 1.0.0 of the SDK, we have removed support for this authorization component.\nInstead we encourage you to use your favourite OpenID Connect & OAuth2.0 implementation, this can provide greater flexibility in your application.`}</p>\n    <p>{`Of course we are still providing an example implementation in the provided sample application, but from now on using the official, open-source `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/openid/AppAuth-Android\"\n      }}>{`AppAuth-Android`}</a>{` library provided by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://openid.net/\"\n      }}>{`OpenID Foundation`}</a>{`.\nYou can find detailed documentation on how to use the auth library on the linked GitHub repository if you need information beyond what the sample application provides.`}</p>\n    <p><strong parentName=\"p\">{`Basic steps of authentication & authorization`}</strong>{`:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Acquiring OpenID configuration`}</li>\n      <li parentName=\"ol\">{`Loading the authentication endpoint in a `}<inlineCode parentName=\"li\">{`CustomTab`}</inlineCode></li>\n      <li parentName=\"ol\">{`User authenticates through their login provider`}</li>\n      <li parentName=\"ol\">{`User receives an ID Token & Authorization Code`}</li>\n      <li parentName=\"ol\">{`Authorization can be used to obtain Access Token using the token endpoint provided by OpenID configuration`}</li>\n    </ol>\n    <p>{`Please note that this is a very basic description of what actually happens, and focuses on only the `}<em parentName=\"p\">{`Authorization Code flow`}</em>{`. OpenID and OAuth2.0 is capable of much more than just this.\nFor details about authenticating with IBM Video Streaming services see: `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.video.ibm.com/api-basics-authentication\"\n      }}>{`API Authentication`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.video.ibm.com/api-basics-native-apps\"\n      }}>{`API Native app support`}</a>{`.`}</p>\n    <p>{`For more details about accessing channel based resources from the API see the sample app or visit `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.video.ibm.com/channel-api-basic-channel-management\"\n      }}>{`IBM Video Streaming Channel API`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","kind","parentName","isMDXComponent"],"sourceRoot":""}