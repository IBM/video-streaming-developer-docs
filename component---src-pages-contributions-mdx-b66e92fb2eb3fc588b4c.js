"use strict";(self.webpackChunkexample=self.webpackChunkexample||[]).push([[1649],{92230:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return l},default:function(){return k}});var a=n(63366),o=(n(67294),n(64983)),s=n(8152),r=["components"],l={},i=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)}},p=i("PageDescription"),m=i("AnchorLinks"),c=i("AnchorLink"),u=i("Title"),d={_frontmatter:l},h=s.Z;function k(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)(h,Object.assign({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(p,{mdxType:"PageDescription"},(0,o.kt)("p",null,"Use this guide to contribute to the theme. We’ll show you how to get the development environment set up as quickly as possible so you can start contributing.")),(0,o.kt)(m,{mdxType:"AnchorLinks"},(0,o.kt)(c,{mdxType:"AnchorLink"},"Project setup"),(0,o.kt)(c,{mdxType:"AnchorLink"},"Development"),(0,o.kt)(c,{mdxType:"AnchorLink"},"Work in a branch"),(0,o.kt)(c,{mdxType:"AnchorLink"},"Sass and CSS Modules"),(0,o.kt)(c,{mdxType:"AnchorLink"},"VS Code"),(0,o.kt)(c,{mdxType:"AnchorLink"},"Test pages"),(0,o.kt)(c,{mdxType:"AnchorLink"},"Publishing")),(0,o.kt)("h2",null,"Project setup"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/carbon-design-system/gatsby-theme-carbon"},"gatsby-theme-carbon")," and click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Fork")," button in the top-right corner.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"After it’s finished, click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Clone or Download")," button and copy the contents.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In your terminal, clone the repo into your directory of choice"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git clone [PASTE_URL_HERE]\ncd gatsby-theme-carbon\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"When you clone your forked repo the ",(0,o.kt)("inlineCode",{parentName:"p"},"origin")," is set to your fork by default. You’ll want to add a remote that points to the upstream repo."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In your terminal, verify that the remotes have been set"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git remote -v\n")))),(0,o.kt)("h2",null,"Development"),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://yarnpkg.com/lang/en/docs/install/"},"yarn")," and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that’s closely linked to the theme with minimal setup. Run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn install")," to install all of the projects dependencies."),(0,o.kt)("p",null,"This project has two packages: the actual theme package (",(0,o.kt)("inlineCode",{parentName:"p"},"gatsby-theme-carbon"),") and the ",(0,o.kt)("inlineCode",{parentName:"p"},"example")," package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The ",(0,o.kt)("inlineCode",{parentName:"p"},"example")," package also serves as the theme’s documentation and ",(0,o.kt)("a",{parentName:"p",href:"https://gatsby-theme-carbon.now.sh"},"website"),"; it’s deployed on every merge to master."),(0,o.kt)("p",null,"New theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory."),(0,o.kt)(u,{mdxType:"Title"},"Development scripts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"yarn dev")," – start the development environment"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"yarn dev:clean")," – clear cache and restart dev"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"yarn format")," – format your code with prettier"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"yarn lint")," - check for errors in your javascript"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"yarn test:prefix")," – build and serve with a path prefix")),(0,o.kt)("h2",null,"Work in a branch"),(0,o.kt)("p",null,"You should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don’t accidentally commit anything to your master branch and get stuck when trying to open a pull request."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git checkout master\ngit pull upstream master\ngit checkout -b my-branch-name\n")),(0,o.kt)("p",null,"When you’re ready to open a pull request, push to your origin remote."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"git push origin my-branch-name\n")),(0,o.kt)("p",null,"You’ll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form."),(0,o.kt)("h2",null,"Sass and CSS Modules"),(0,o.kt)("p",null,"For internal theme components we use ",(0,o.kt)("a",{parentName:"p",href:"https://sass-lang.com/documentation/syntax"},"Sass")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/css-modules/css-modules#css-modules"},"CSS Modules"),". This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each ",(0,o.kt)("inlineCode",{parentName:"p"},".scss")," file will be supplied with all of the Carbon Sass ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss"},"variables"),": color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically."),(0,o.kt)("p",null,"You should colocate your stylesheet with the component(s) that import it. If the component is ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeView")," then the stylesheet should be ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeView.module.scss"),". All contained within the ",(0,o.kt)("inlineCode",{parentName:"p"},"TreeView")," directory."),(0,o.kt)("h3",null,"CSS Modules"),(0,o.kt)("p",null,"You don’t need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the ",(0,o.kt)("inlineCode",{parentName:"p"},".scss")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss",metastring:"path=TreeView.module.scss",path:"TreeView.module.scss"},".treeView {\n  color: $text-01;\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"path=TreeView.js",path:"TreeView.js"},"import { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;\n")),(0,o.kt)("p",null,"For conditionally applying class names, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"classname")," library. Note how we’re using a ",(0,o.kt)("a",{parentName:"p",href:"https://tylermcginnis.com/computed-property-names/"},"computed property name")," for the property being based to ",(0,o.kt)("inlineCode",{parentName:"p"},"cx"),". That’s because the className isn’t literally ",(0,o.kt)("inlineCode",{parentName:"p"},'"long"')," it’s a value generated by CSS Modules and placed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"long")," variable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"path=TreeView.js",path:"TreeView.js"},"import cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};\n")),(0,o.kt)("p",null,"If you need to target a global class not processed by CSS Modules, you can do so with the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/css-modules/css-modules#exceptions"},"global selector"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scss"},":global(.bx--grid) .codeBlock {\n  @include type-style('code-01');\n}\n")),(0,o.kt)("h2",null,"VS Code"),(0,o.kt)("p",null,"To get linting error feedback while writing javascript and SCSS in VS Code, install the ",(0,o.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint"},"stylelint")," and ",(0,o.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"},"ESlint")," extensions. We use ESLint’s Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a ",(0,o.kt)("inlineCode",{parentName:"p"},".vscode/settings.json")," in the root of your project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"path=.vscode/settings.json",path:".vscode/settings.json"},'{\n  "editor.formatOnSave": true,\n  "[javascript]": {\n    "editor.formatOnSave": false\n  },\n  "[javascriptreact]": {\n    "editor.formatOnSave": false\n  },\n  "eslint.autoFixOnSave": true,\n  "prettier.disableLanguages": ["javascript", "javascriptreact"]\n}\n')),(0,o.kt)("p",null,"To lint the entire project and get errors in your ",(0,o.kt)("inlineCode",{parentName:"p"},"Problems")," tray, you can add the following to a ",(0,o.kt)("inlineCode",{parentName:"p"},".vscode/tasks.json")," file in the root of your project. You can run these tasks with ",(0,o.kt)("inlineCode",{parentName:"p"},"cmd+shift+d")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"path=.vscode/tasks.json",path:".vscode/tasks.json"},'{\n  "version": "2.0.0",\n  "tasks": [\n    {\n      "type": "npm",\n      "script": "lint:js",\n      "problemMatcher": "$eslint-stylish"\n    },\n    {\n      "type": "npm",\n      "script": "lint:scss",\n      "problemMatcher": {\n        "owner": "stylelint",\n        "fileLocation": ["relative", "${workspaceFolder}"],\n        "pattern": [\n          {\n            "regexp": "^([^\\\\s].*)$",\n            "file": 1\n          },\n          {\n            "regexp": "^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$",\n            "line": 1,\n            "column": 2,\n            "severity": 3,\n            "message": 4,\n            "code": 5,\n            "loop": true\n          }\n        ]\n      }\n    }\n  ]\n}\n')),(0,o.kt)("h2",null,"Test pages"),(0,o.kt)("p",null,"If you want to add examples of what you are working on or see changes you’ve made, you can add an MDX file to ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/src/pages/test")," that will be visible at ",(0,o.kt)("inlineCode",{parentName:"p"},"(your-server-name)/test/(added-file)")," during development. If you do add a page to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/test")," directory, update the below list with the file you added and its purpose to be included with your pull request."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/test/spacing-audit"},(0,o.kt)("inlineCode",{parentName:"a"},"Spacing audit")),": use this page to test spacing around components when combined in common patterns.")),(0,o.kt)("h2",null,"Publishing"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"figure out if it’s patch or feature"),(0,o.kt)("li",{parentName:"ol"},"from the root of the package run ",(0,o.kt)("inlineCode",{parentName:"li"},"lerna publish patch")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"lerna publish minor")),(0,o.kt)("li",{parentName:"ol"},"git push upstream master —follow-tags"),(0,o.kt)("li",{parentName:"ol"},"In the project’s ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/carbon-design-system/gatsby-theme-carbon/releases"},"release tab"),", edit the new release to include a summary of new changes")))}k.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-contributions-mdx-b66e92fb2eb3fc588b4c.js.map