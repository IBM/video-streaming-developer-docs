{"version":3,"file":"component---src-pages-broadcaster-sdk-android-development-process-mdx-2bb905ef649acb8b8573.js","mappings":"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","sources":["webpack://example/./src/pages/broadcaster-sdk-android/development-process.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Please note that as of November 1st, 2022 IBM has discontinued support for the Video Streaming Broadcaster SDK. It will not receive updates or technical support and may not fully function. For SDKs you have already downloaded, please do not use them to build applications to access the broadcasting functionality, and delete them from your archives. You may find information on alternative methods to broadcast live video to your channel on our `}<a parentName=\"p\" {...{\n          \"href\": \"https://support.video.ibm.com/hc/en-us/categories/200545448-Broadcasting-on-IBM-Watson-Media\"\n        }}>{`Support Center`}</a>{`.`}</p>\n    </InlineNotification>\n    <h2>{`Step 1: Download SDK package`}</h2>\n    <p>{`Before you download the SDK package, go to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://video.ibm.com/dashboard/integrations/api-access\"\n      }}>{`API/SDK access`}</a>{` page of the Dashboard and create a Channel API access for your application. When creating the credentials make sure to select “Native application” at the end.`}</p>\n    <p>{`When you’ve created your API access you can download the SDK package from the “Broadcaster SDK” section of this same page. Use the “Download Android Broadcaster SDK” button.`}</p>\n    <p><em parentName=\"p\">{`If you’re using the EU cluster you can create your access on the dashboard of the EU cluster.`}</em></p>\n    <h2>{`Step 2: Explore the SDK package`}</h2>\n    <p>{`The downloaded zip archive contains the sample application, and inside the `}<inlineCode parentName=\"p\">{`m2repository`}</inlineCode>{` folder the packaged SDK and its IBM specific dependencies.`}</p>\n    <h2>{`Step 3: Create (or open) your project`}</h2>\n    <p>{`Open the project that you would like to integrate the SDK in.\nThe SDK uses the following permissions:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`android.permission.INTERNET`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`android.permission.CAMERA`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`android.permission.RECORD_AUDIO`}</inlineCode></li>\n    </ul>\n    <p>{`The latter two, of course should be requested dynamically when needed, just like the sample app does.`}</p>\n    <p>{`The SDK also requires the Android device — on which the resulting application is installed — to have at least one camera.`}</p>\n    <p>{`You don’t need to update the `}<inlineCode parentName=\"p\">{`AndroidManifest.xml`}</inlineCode>{` of your application with these permissions, as they will be automatically added during the manifest merge process.`}</p>\n    <h2>{`Step 4: Add the SDK to the project`}</h2>\n    <p>{`Import from local repo: copy the `}<inlineCode parentName=\"p\">{`m2repository`}</inlineCode>{` folder to your project. In your project’s `}<inlineCode parentName=\"p\">{`build.gradle`}</inlineCode>{` put the Video Streaming SDK dependency:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-gradle\"\n      }}>{`repositories {\n    maven {\n        name 'IBMLocal'\n        url new File(\"\\${rootProject.rootDir.path}/m2repository\").toURI()\n    }\n}\n\ndependencies {\n    implementation 'com.ibm.video.android.broadcaster:sdk:1.0.+'\n}\n`}</code></pre>\n    <p>{`You can find this in the sample application as well, just copy those settings.`}</p>\n    <h2>{`Step 5: Create Broadcaster`}</h2>\n    <p>{`Setting up a broadcaster session in your app can be done in a few easy steps. The main component you instantiate is an `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` object. This class is responsible for the whole broadcast session — that is making connection with the broadcaster server, gathering the audio and video data through the AudioRecord and Camera2 APIs of Android, and present a preview of the captured frames using a TextureView.`}</p>\n    <p>{`The AndroidBroadcaster class has multiple configuration options upon creation, many of them have sane defaults already set up.\nThe constructor parameters `}<em parentName=\"p\">{`in order of importance, not actual order`}</em>{` are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`regionalCluster`}</inlineCode>{`: this is a mandatory parameter since 1.0.0. This instructs the SDK which IBM WM server cluster it can connect to. If you’re a customer of the EU cluster, use: `}<inlineCode parentName=\"li\">{`RegionalCluster.EU`}</inlineCode>{`, otherwise `}<inlineCode parentName=\"li\">{`RegionalCluster.WW`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`channelId`}</inlineCode>{`: this is a mandatory and crucial value. This is the IBM (Enterprise) Video Streaming channel’s id that will be used to broadcast to`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`accessToken`}</inlineCode>{`: this is a mandatory and crucial value. This is the access token that is used to access the IBM Channel API. For more information see: `}<a parentName=\"li\" {...{\n          \"href\": \"#step-7:-authenticating-to-the-broadcast-server\",\n          \"title\": \"Authentication\"\n        }}>{`Step 7`}</a></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`context`}</inlineCode>{`: is the context of the current activity. Used for various operations, for example getting available cameras`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`textureView`}</inlineCode>{`: is the view on which the preview will be rendered`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`lifecycleListener`}</inlineCode>{`: is a listener part of the SDK, that can be used to receive state updates from the broadcaster instance. Has a default value, that ignores all state changes. It is highly recommended to listen — at least — to broadcaster lifecycle events`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`resolution`}</inlineCode>{`: the target resolution that will be used for both the preview and the outgoing video stream. The default value is 1280x720, but not all devices (actually camera + encoder pairs) support 720p resolution (or any other specific resolution for that matter). Therefore it is `}<em parentName=\"li\">{`your responsibility`}</em>{` to query which resolutions are supported by the device, and set one that is supported and sufficient for your needs. It is recommended to use 16:9 aspect ratio. The sample app has a basic implementation of this`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`cameraIdList`}</inlineCode>{`: is an Array of Strings containing all the camera ids (provided by Camera2 API) that you wish to make available for the SDK`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`initialCameraIdx`}</inlineCode>{`: is the index of the camera from `}<inlineCode parentName=\"li\">{`cameraIdList`}</inlineCode>{` to be selected from start. By default the first camera is selected`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`errorListener`}</inlineCode>{`: is a listener part of the SDK, that can be used to receive error events from the broadcaster instance. Has a default value, that ignores all events. It is recommended to listen to error events`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`callbackLooper`}</inlineCode>{`: the Android Looper that will be used to execute callbacks on. By default it is the Looper from which the broadcaster has been instantiated`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`targetBitrate`}</inlineCode>{`: is a the desired output bitrate (in bit/s) after encoding the video. Default value is 3 Mbit/s. Please note: the resulting actual output bitrate value may vary depending on the underlying encoder of the device and the captured input content`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`targetFps`}</inlineCode>{`: a Double value representing the desired output frames / second of the video stream. Default value is 25.0 fps`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`camera2Listener`}</inlineCode>{`: is an optional listener which can be used to get notified about camera related events. Has a default value, that ignores all events. In a typical use-case you don’t need to use this listener`}</li>\n    </ul>\n    <p>{`For example:`}</p>\n    <p><em parentName=\"p\">{`Kotlin`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`androidBroadcaster = AndroidBroadcaster(\n                regionalCluster,\n                this@BroadcastActivity,\n                textureView,\n                cameraManager.cameraIdList,\n                BroadcasterLifeCycleListener(),\n                targetResolution,\n                errorListener = BroadcasterErrorListener(),\n                camera2Listener = cameraListener,\n                channelId = broadcastConfiguration.channel!!.id.toString(),\n                accessToken = tokenContainer.accessToken)\n`}</code></pre>\n    <h2>{`Step 6: Broadcaster user interface`}</h2>\n    <p>{`The IBM Video Streaming SDK doesn’t provide any user interface besides the captured preview. To help get started with building your own UI, you can find a basic UI implementation in the sample app.`}</p>\n    <h2>{`Step 7: Authenticating to the broadcast server`}</h2>\n    <p>{`To be able to start the actual broadcast session, you need a `}<strong parentName=\"p\">{`RegionalCluster`}</strong>{`, a `}<strong parentName=\"p\">{`Channel ID`}</strong>{` to broadcast to and an `}<strong parentName=\"p\">{`Access Token`}</strong>{` which authenticates your broadcast. The first one represents the cluster your account belongs to.\nThe latter two can be obtained using IBM Video Streaming Channel API. For further details, please refer the `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm.github.io/video-streaming-developer-docs/channel-api-basic-channel-management\",\n        \"title\": \"IBM Video Streaming Channel API\"\n      }}>{`Channel API Documentation`}</a>{`. Once you obtained the Channel ID and the Access Token you can use them to start the actual broadcast.`}</p>\n    <p>{`The previous versions of the SDK have provided an implementation of IBM Video Streaming Authentication Flow, however starting with version 1.0.0 this is not the case anymore.\nAuthentication with the platform happens using standard OpenID & OAuth2.0, thus we’ve transitioned to using an open-source implementation in the sample project.\nYou can read more about the topic in the `}<a parentName=\"p\" {...{\n        \"href\": \"./migration-guide\"\n      }}>{`Migration Guide`}</a>{` and at `}<a parentName=\"p\" {...{\n        \"href\": \"./aux-features#authentication\"\n      }}>{`Authentication`}</a>{` in the Auxiliary Features section.\nExample usage can also be found in the provided sample application.`}</p>\n    <h2>{`Step 8: Starting the broadcaster`}</h2>\n    <p>{`By now you have configured your broadcaster and it is ready to show you the preview of captured frames, and receive audio and video data to be encoded and sent to IBM’s servers.`}</p>\n    <h3>{`Capturing and showing preview`}</h3>\n    <p>{`The broadcaster client has multiple states (see: `}<a parentName=\"p\" {...{\n        \"href\": \"#state-change-callbacks\",\n        \"title\": \"State change callbacks in Step 9\"\n      }}>{`Step 9`}</a>{` section for more information), but it is in the `}<strong parentName=\"p\">{`Uninitialized`}</strong>{` state initially. To be able to see the preview (before the actual broadcast) the instance needs to be “prepared”:`}</p>\n    <p><em parentName=\"p\">{`Kotlin`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`androidBroadcaster.prepareComponents()\n`}</code></pre>\n    <p>{`This call will prepare all the required sub-components of the SDK instance (e.g: start the capture devices), then it will render the captured frames onto the preview surface. This signal makes the SDK transition through the following states:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Uninitialized -> Preparing -> Ready`}</p>\n    </blockquote>\n    <p><em parentName=\"p\">{`Please note`}</em>{`: It is your responsibility to check and ask for the appropriate permissions before calling `}<inlineCode parentName=\"p\">{`prepareComponents()`}</inlineCode>{` on the SDK instance.`}</p>\n    <p>{`The API is symmetric, to tear down the instance (and stop the preview along with any potentially running broadcast) you can call:`}</p>\n    <p><em parentName=\"p\">{`Kotlin`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`androidBroadcaster.releaseComponents()\n`}</code></pre>\n    <p>{`This will transition the SDK instance through the following states:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Ready -> Releasing -> Uninitialized`}</p>\n    </blockquote>\n    <p>{`(In the case when the broadcaster is not in the `}<strong parentName=\"p\">{`Ready`}</strong>{` state when calling this method (e.g: it is `}<strong parentName=\"p\">{`Executing`}</strong>{`), the broadcaster will forcefully transition to the Ready state then begin orderly shutdown from there.)`}</p>\n    <h3>{`Starting the live stream`}</h3>\n    <p>{`When the SDK instance is in the `}<strong parentName=\"p\">{`Ready`}</strong>{` state it is possible to start the actual broadcast (a.k.a live stream). At this time captured frames are encoded and sent to IBM’s servers, and your viewers can join in on your session. The instance can be started using:`}</p>\n    <p><em parentName=\"p\">{`Kotlin`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`androidBroadcaster.startBroadcast()\n`}</code></pre>\n    <p>{`This call will start all the required components, like the encoders, and joins IBM servers so it can send data. This signal makes the SDK transition through the following states:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Ready -> Starting -> Executing`}</p>\n    </blockquote>\n    <p>{`The API is symmetric, to stop the ongoing broadcast (and return to only showing the preview) you can call:`}</p>\n    <p><em parentName=\"p\">{`Kotlin`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`androidBroadcaster.stopBroadcast()\n`}</code></pre>\n    <p>{`This will transition the SDK instance through the following states:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Executing -> Stopping -> Ready`}</p>\n    </blockquote>\n    <h3>{`Cleaning up resources`}</h3>\n    <p>{`When the SDK instance is known to be not required anymore, you should tear it down completely by calling:`}</p>\n    <p><em parentName=\"p\">{`Kotlin`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`androidBroadcaster.destroy()\n`}</code></pre>\n    <p>{`This method is actually the “other-end” of the constructor call. This method should be used when the broadcaster is `}<strong parentName=\"p\">{`Uninitialized`}</strong>{`, but the method will try and wait a bit for components to finish if used otherwise.`}</p>\n    <h2>{`Step 9: Handle broadcaster callbacks`}</h2>\n    <p>{`The SDK has multiple listeners (some of them mandatory, some optional) that communicate different kinds of states and events.`}</p>\n    <p><em parentName=\"p\">{`Please note`}</em>{`: The threading model of the callbacks is that you always receive the callbacks from the same thread (`}<inlineCode parentName=\"p\">{`Looper`}</inlineCode>{` actually) on which the `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` instance has been created. Unless upon creating the `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` you supply another `}<inlineCode parentName=\"p\">{`Looper`}</inlineCode>{` for the callbacks via the `}<inlineCode parentName=\"p\">{`callbackLooper`}</inlineCode>{` parameter.`}</p>\n    <h3>{`State change callbacks`}</h3>\n    <p>{`To receive state change callbacks register a `}<inlineCode parentName=\"p\">{`Broadcaster.LifeCycleListener`}</inlineCode>{` when creating the `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` instance. This way you will be notified whenever there is a change in the broadcaster’s state.`}</p>\n    <p>{`The list of possible state are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Uninitialized`}</strong>{` via `}<inlineCode parentName=\"li\">{`onUninitialized()`}</inlineCode>{`: The state of the instance when it’s been just created, or components had been released by `}<inlineCode parentName=\"li\">{`releaseComponents()`}</inlineCode>{`. In this state the broadcaster is at rest; no data is being captured, no processing being done, resources are not held. (Except an idle worker thread that can be disposed of by calling `}<inlineCode parentName=\"li\">{`destroy()`}</inlineCode>{`.)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Preparing`}</strong>{` via `}<inlineCode parentName=\"li\">{`onPreparing()`}</inlineCode>{`: The state of the instance when it’s received a `}<inlineCode parentName=\"li\">{`prepareComponents()`}</inlineCode>{` call, components are being prepared. This is a transient state, the SDK will transition to another state soon, the target state is `}<em parentName=\"li\">{`Ready`}</em></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Ready`}</strong>{` via `}<inlineCode parentName=\"li\">{`onReady()`}</inlineCode>{`: The state of the instance when components had been prepared, and the preview is showing. In this state certain resources are actively used (i.e: Camera), but no encoding or data sending happens.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Starting`}</strong>{` via `}<inlineCode parentName=\"li\">{`onStarting()`}</inlineCode>{`: The state of the instance when it’s received a `}<inlineCode parentName=\"li\">{`startBroadcast()`}</inlineCode>{` call while previously being in the `}<em parentName=\"li\">{`Ready`}</em>{` state. This is a transient state, the SDK will transition to another state soon, the target state is `}<em parentName=\"li\">{`Executing`}</em></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Executing`}</strong>{` via `}<inlineCode parentName=\"li\">{`onExecuting()`}</inlineCode>{`: The state of the instance when the broadcast is running. In this state all required resources are actively used (i.e: Camera, AudioRecorder, Encoders, Network), audio / video data is being encoded on-the-fly and sent to IBM’s servers.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Stopping`}</strong>{` via `}<inlineCode parentName=\"li\">{`onStopping()`}</inlineCode>{`: The state of the instance when it’s received a `}<inlineCode parentName=\"li\">{`stopBroadcast()`}</inlineCode>{` while being in the `}<em parentName=\"li\">{`Executing`}</em>{` state. This is a transient state, the SDK will transition to another state soon. The target state is `}<em parentName=\"li\">{`Ready`}</em>{`, where the preview will show again. Please note that in this state the buffers are being emptied: already recorded data is being encoded and transmitted — which can take a few seconds, depending on network speed`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Releasing`}</strong>{` via `}<inlineCode parentName=\"li\">{`onReleasing()`}</inlineCode>{`: The state of the instance when it’s received a `}<inlineCode parentName=\"li\">{`releaseComponents()`}</inlineCode>{` call while being in or anywhere “after” the `}<em parentName=\"li\">{`Ready`}</em>{` state. This is a transient state, the SDK will transition to another state soon. The target state is `}<em parentName=\"li\">{`Uninitialized`}</em>{`, where resources are released`}</li>\n    </ul>\n    <h3>{`Error event listener`}</h3>\n    <p>{`To receive the error events that are possibly occurring inside the broadcaster, you need to register an `}<inlineCode parentName=\"p\">{`AndroidBroadcasterErrorListener`}</inlineCode>{` when creating the `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` instance.`}</p>\n    <p>{`The list of possible error events are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`AudioRecorderInitializationError`}</inlineCode>{`: Received when the AudioRecorder could not be initialized, the accompanying message contains the reason`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`AudioRecorderFailure`}</inlineCode>{`: Received when the AudioRecorder encounters an error during recording for some reason`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`CameraError`}</inlineCode>{`: Received when the Camera2 API encounters an error or an unexpected behaviour is reported from the API, the accompanying `}<inlineCode parentName=\"li\">{`Camera2Error`}</inlineCode>{` object contains the reason reported by Android’s Camera2 API`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`CodecError`}</inlineCode>{`: Received when one of the active codecs had thrown an exception while encoding the incoming frames (audio or video). The accompanying `}<inlineCode parentName=\"li\">{`codecName`}</inlineCode>{` String represents which Codec is involved, the `}<inlineCode parentName=\"li\">{`message`}</inlineCode>{` parameter contains the reason`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`EncoderError`}</inlineCode>{`: Received when either the encoder could not be configured with the requested details or when the encoder’s internal state machine had thrown an error`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ConnectionError`}</inlineCode>{`: Received when a network related error is encountered in the underlying RTMP layer`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`BroadcastOverride`}</inlineCode>{`: Received when the current broadcast session has been terminated because another broadcaster client took over your channel`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`RTMPRejectError`}</inlineCode>{`: Received when the RTMP connection has been rejected by IBM’s servers, the accompanying String contains the reason`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`IngestSettingsLoaderError`}</inlineCode>{`: Received when the mandatory configuration could not be retrieved from IBM’s servers for any reason`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Please note`}</strong>{`: Upon receiving any of the above errors the broadcaster will transition to the `}<em parentName=\"p\">{`Uninitialized`}</em>{` state.`}</p>\n    <h3>{`Camera event listener`}</h3>\n    <p>{`To receive events regarding the used camera, you need to register a `}<inlineCode parentName=\"p\">{`Camera2Listener`}</inlineCode>{` when creating the `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` instance. However this listener is considered as providing camera related optional meta information. In a normal use-case you will not care about these events, and it is perfectly fine to leave it as default.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onCameraOpened(cameraId)`}</inlineCode>{`: Received when the selected camera is opened, both while watching preview and broadcasting. The parameter is the String id of the camera, provided by the Android framework.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onCameraClosed(cameraId)`}</inlineCode>{`: Received when the selected camera is closed. The parameter is the String id of the camera, provided by the Android framework.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineNotification","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","Object","assign","mdxType","kind","parentName","isMDXComponent"],"sourceRoot":""}