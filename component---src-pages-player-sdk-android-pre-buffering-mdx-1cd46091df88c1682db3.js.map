{"version":3,"file":"component---src-pages-player-sdk-android-pre-buffering-mdx-1cd46091df88c1682db3.js","mappings":"4LAOsBA,E,4DADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAImB,qBAJX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5BM,EAAAA,EAAAA,IAAA,MAASH,EAClB,GAEMI,EAAc,CAClBN,aAAAA,GAEIO,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGT,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,IAACE,EAASO,OAAAC,OAAA,GAAKT,EAAiBJ,EAAK,CAAES,WAAYA,EAAYK,QAAQ,eAG5EX,EAAAA,EAAAA,IAACJ,EAAkB,CAACgB,KAAK,UAAUD,QAAQ,uBACzCX,EAAAA,EAAAA,IAAA,0aAAoaA,EAAAA,EAAAA,IAAA,KAAGa,WAAW,IAC9a,KAAQ,kEAAgE,yBAC1C,iFAAiFb,EAAAA,EAAAA,IAAA,KAAGa,WAAW,IAC7H,KAAQ,0BAAwB,iBACV,oCAE5Bb,EAAAA,EAAAA,IAAA,sCAAgCA,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,YAA0B,iJAEtDb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,cAA4B,gBAAgBb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,UAAwB,4CAA4Cb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,UAAwB,2NAGpPb,EAAAA,EAAAA,IAAA,oBACAA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,aAAcb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,UAAwB,6CAA6Cb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,iCAA+C,oEAC3Mb,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,yCAA0Cb,EAAAA,EAAAA,IAAA,UAAQa,WAAW,MAAI,YAAsB,cAC1Gb,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,SAAUb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,WAAyB,oHAC5Cb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,uBAAqC,MAAMb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,sBAAoC,SAASb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,YAA0B,0IACnJb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,YAA0B,sEACrIb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,YAA0B,6CAC1Db,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,+DAAgEb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,cAA4B,WAAWb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,cAChLb,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,SAAUb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,iBAA+B,+DAEzFb,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,UAAQa,WAAW,KAAG,WAAqB,MAC9Cb,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMa,WAAW,MAClB,UAAa,iBAAe,qiBAehCb,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,UAAQa,WAAW,KAAG,QAAkB,MAC3Cb,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,kJACnBb,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,0DAA2Db,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,aAA2B,WAI1I,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://example/./src/pages/player-sdk-android/pre-buffering.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Please note that as of November 1st, 2022 IBM has discontinued support for the Video Streaming Player SDK. It will not receive updates or technical support and may not fully function. For SDKs you have already downloaded, please do not use them to build applications and delete them from your archives. You may find information for alternative methods to create customized viewer experiences with our APIs on our `}<a parentName=\"p\" {...{\n          \"href\": \"https://developers.video.ibm.com/player-api-examples/custom-ui\"\n        }}>{`Developer Tools pages`}</a>{`. Users may also continue to access Video Streaming through the web, both at `}<a parentName=\"p\" {...{\n          \"href\": \"https://video.ibm.com/\"\n        }}>{`video.ibm.com`}</a>{` and through Embedded modules.`}</p>\n    </InlineNotification>\n    <p>{`Players initialized with `}<inlineCode parentName=\"p\">{`RECORDED`}</inlineCode>{` content can be buffered ahead of time.\nThis way an illusion of instantly starting videos can be achieved.\nBy the time a player is needed (`}<inlineCode parentName=\"p\">{`PlayerView`}</inlineCode>{` is set and `}<inlineCode parentName=\"p\">{`play()`}</inlineCode>{` is called) it is likely already in the `}<inlineCode parentName=\"p\">{`Paused`}</inlineCode>{` state, and playback can start immediately.\nThis feature’s most obvious use-case is a newsfeed like playback experience,\nwhen video contents are scrolling into the view and need to be started as soon as possible.`}</p>\n    <h2>{`Usage`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Create a `}<inlineCode parentName=\"li\">{`Player`}</inlineCode>{` instance with an ID. (The ID can be the `}<inlineCode parentName=\"li\">{`contentDescriptors.toString()`}</inlineCode>{` value for simplicity, if duplicate contents are not required.)`}</li>\n      <li parentName=\"ul\">{`Initialize the created player with a `}<strong parentName=\"li\">{`RECORDED`}</strong>{` content.`}</li>\n      <li parentName=\"ul\">{`Call `}<inlineCode parentName=\"li\">{`pause()`}</inlineCode>{` on the player. The Player will buffer the content then it will wait.\nAt this stage it is not required to call `}<inlineCode parentName=\"li\">{`setPlayerListener()`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`setErrorListener()`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode>{` if the callbacks are not relevant for you.\nBut you are free to do so if you are interested in the callbacks, but make sure you call `}<inlineCode parentName=\"li\">{`detach()`}</inlineCode>{` before changing listeners or playerView on the player,\nand call `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode>{` again so these changes can take effect.`}</li>\n      <li parentName=\"ul\">{`Later when the player is needed set your listeners and the `}<inlineCode parentName=\"li\">{`playerView`}</inlineCode>{`, call `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode></li>\n      <li parentName=\"ul\">{`Call `}<inlineCode parentName=\"li\">{`player.play()`}</inlineCode>{` and if it is buffered the playback will start instantly.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`PlayerFactory playerFactory = new PlayerFactory(RegionalCluster.WORLD_WIDE, API_KEY, activity);\nContentDescriptor contentDescriptor = new ContentDescriptor(ContentType.RECORDED, 123456L);\nPlayer player1 = playerFactory.createPlayer(contentDescriptor.toString());\nplayer1.initWithContent(contentDescriptor);\nplayer1.pause();\n\n//... AT A LATER POINT, WHEN THE PLAYER IS NEEDED:\n\nplayer1.setPlayerListener(playerListener);\nplayer1.setErrorListener(errorListener);\nplayer1.setPlayerView(playerView);\nplayer1.attach();\nplayer1.play();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Only your device capabilities (mostly RAM) limit how many players you can pre-buffer. Keeping too many players can cause an OutOfMemoryError.`}</li>\n      <li parentName=\"ul\">{`When the players are no longer needed don’t forget to `}<inlineCode parentName=\"li\">{`destroy()`}</inlineCode>{` them.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineNotification","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","Object","assign","mdxType","kind","parentName","isMDXComponent"],"sourceRoot":""}