{"version":3,"file":"component---src-pages-broadcaster-sdk-android-diagnosing-a-problem-mdx-cd4c4f80acc05bd5fa21.js","mappings":"4LAOsBA,E,4DADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAImB,qBAJX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5BM,EAAAA,EAAAA,IAAA,MAASH,EAClB,GAEMI,EAAc,CAClBN,aAAAA,GAEIO,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGT,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,IAACE,EAASO,OAAAC,OAAA,GAAKT,EAAiBJ,EAAK,CAAES,WAAYA,EAAYK,QAAQ,eAG5EX,EAAAA,EAAAA,IAACJ,EAAkB,CAACgB,KAAK,UAAUD,QAAQ,uBACzCX,EAAAA,EAAAA,IAAA,0cAAocA,EAAAA,EAAAA,IAAA,KAAGa,WAAW,IAC9c,KAAQ,gGAA8F,kBAC/E,OAE7Bb,EAAAA,EAAAA,IAAA,oNACAA,EAAAA,EAAAA,IAAA,4BACAA,EAAAA,EAAAA,IAAA,sbACAA,EAAAA,EAAAA,IAAA,6HACAA,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,UAAQa,WAAW,KAAG,6BAAuC,WAC9Db,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,gBAA8B,iCAAiCb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,sBAAoC,iHAAiHb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,gBAA8B,MAClUb,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,UAAQa,WAAW,KAAG,0BAAoC,gDACtBb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,qBAAmC,iBAAiBb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,sBAAoC,gIAC5Db,EAAAA,EAAAA,IAAA,MAAIa,WAAW,KAAG,uBAA6B,OAAOb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,sBAAoC,+CAA+Cb,EAAAA,EAAAA,IAAA,MAAIa,WAAW,KAAG,6BAAmC,OAAOb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,2CAAyD,gBACzab,EAAAA,EAAAA,IAAA,8GAGJ,CAEAI,EAAWU,gBAAiB,C","sources":["webpack://example/./src/pages/broadcaster-sdk-android/diagnosing-a-problem.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Please note that as of November 1st, 2022 IBM has discontinued support for the Video Streaming Broadcaster SDK. It will not receive updates or technical support and may not fully function. For SDKs you have already downloaded, please do not use them to build applications to access the broadcasting functionality, and delete them from your archives. You may find information on alternative methods to broadcast live video to your channel on our `}<a parentName=\"p\" {...{\n          \"href\": \"https://support.video.ibm.com/hc/en-us/categories/200545448-Broadcasting-on-IBM-Watson-Media\"\n        }}>{`Support Center`}</a>{`.`}</p>\n    </InlineNotification>\n    <p>{`IBM Video Streaming SDK sends diagnostic data along with the video stream to IBM servers. Diagnostic data contains only transmit statistics, capture events. It does not contain personal information.`}</p>\n    <h2>{`Diagnostic ID`}</h2>\n    <p>{`Session diagnostic ID is an autogenerated unique identifier that helps IBM identify diagnostic data — produced during the current broadcast session — across IBM systems. SDK users can’t access the diagnostic data using the diagnostic ID, rather SDK users should use this ID to report a possible problem during a broadcast session. The accompanying diagnostic data will be used by IBM internally to debug your specific issue.`}</p>\n    <p>{`Please note that the diagnostic ID may change over time, therefore it is best to not cache or store this value.`}</p>\n    <p><strong parentName=\"p\">{`Lifecycle of diagnosticID`}</strong>{`:\nThe `}<inlineCode parentName=\"p\">{`diagnosticID`}</inlineCode>{` is first generated when the `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` instance is created and re-generated after each broadcast stop, thus every broadcast session has its unique `}<inlineCode parentName=\"p\">{`diagnosticID`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Accessing diagnosticID`}</strong>{`:\nYou can always access the current ID via `}<inlineCode parentName=\"p\">{`getDiagnosticId()`}</inlineCode>{` function in `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{`.\nIf you want to store a diagnostic ID for a later bug report of the current session, we recommend to save it when the SDK `}<em parentName=\"p\">{`instance is created`}</em>{` ( `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{`’s constructor) and update it whenever the `}<em parentName=\"p\">{`SDK’s preview has started`}</em>{` ( `}<inlineCode parentName=\"p\">{`Broadcaster.LifeCycleListener.onReady()`}</inlineCode>{` callback).`}</p>\n    <p>{`If your app has its own diagnostics reporting you can send the diagnostic ID to your own records.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineNotification","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","Object","assign","mdxType","kind","parentName","isMDXComponent"],"sourceRoot":""}