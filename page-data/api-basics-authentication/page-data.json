{
    "componentChunkName": "component---src-pages-api-basics-authentication-mdx",
    "path": "/api-basics-authentication/",
    "result": {"pageContext":{"frontmatter":{"title":"Authentication","description":"Authentication"},"relativePagePath":"/api-basics-authentication.mdx","titleType":"page","MdxNode":{"id":"082a1609-a78c-5da6-8acc-af23b2acf0f4","children":[],"parent":"5ab35b33-dec0-5e07-98ff-7e9c133c616c","internal":{"content":"---\ntitle: Authentication\ndescription: Authentication\n---\n\n## Authorization flows\n\nThe OAuth 2.0 protocol provides several workflows for authorizing a user and obtaining an access token. It depends on the type and architecture of the client which flow is the most suitable. The following workflows are supported:\n\n- **Authorization Code:** Suitable for third-party websites which contain a client and a server component.\n- **Client Credentials:** Best choice for users developing server-side applications to manage their content or settings.\n\n### Authorization Code flow\n\n1. The user enters credentials to a secure login webpage.\n2. After logging in, the browser is redirected to a special URL (defined by the client), passing an authorization code in the URL.\n3. The third-party server obtains the access token with another HTTP request in the background, using the authorization code.\n\nSee the OAuth 2.0 Authorization Framework (https://tools.ietf.org/html/rfc6749) for details.\n\n### Client Credentials flow\n\nClient credentials can be generated on the Video Streaming dashboard. The client obtains an access token using the `client_id` and `client_secret`. With this token the user's server-side application can access the resources of the account which is identified by this client_id/client_secret pair.\n\n## Authorizing the user\n\n<Title>Authorization endpoint</Title>\n\n|                        |                                                |\n| ---------------------- | ---------------------------------------------- |\n| Location               | https://authentication.video.ibm.com/authorize |\n| Supported HTTP methods | GET, POST                                      |\n| Supported flows        | Authorization Code                             |\n\nThe authorization endpoint is a secure web page that authenticates the user. The client should show this page to the user in an embedded browser. When the user completes the login process the browser is redirected to a special URL. The client can capture this redirect call and obtain an authorization code.\n\n### Parameters\n\nThe parameters below specify the behavior of the authorization endpoint. These have to be set in GET or POST HTTP parameters.\n\n<Title>Supported OAuth 2.0 standard parameters</Title>\n\n| PARAMETER       | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                                                                                                                |\n| --------------- | ------ | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `response_type` | string | REQUIRED   | `code` for Authorization Code flow                                                                                                                                                                         |\n| `client_id`     | string | REQUIRED   | 40-character long string that identifies the client. Provided by IBM Video Streaming.                                                                                                                      |\n| `redirect_uri`  | string | REQUIRED   | The URI where the browser will redirect after the authentication process. This URI must be registered at IBM Video Streaming.                                                                              |\n| `state`         | string | OPTIONAL   | This value is sent as a GET parameter to the redirect_uri to maintain state between the request and callback. See the OAuth 2.0 Authorization Framework (https://tools.ietf.org/html/rfc6749) for details. |\n| `scope`         | string | OPTIONAL   | Whitelist-separated list of the requested scopes.                                                                                                                                                          |\n\n<Title>IBM Video Streaming specific extra parameters</Title>\n\n| PARAMETER     | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                                                                                                                                                                  |\n| ------------- | ------ | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `device_name` | string | OPTIONAL   | Full product name of the client device or application. It is used for easy identification of the OAuth 2.0 token. The user will be able to review which clients are connected to his/her account, and revoke this access on the IBM Video Streaming website. |\n| `lang`        | string | OPTIONAL   | Show the authorization page in this locale (e.g. en_US); This parameter will also set the language of the newly registered users.                                                                                                                            |\n\n### Response values\n\nThe response values below are appended to the redirect_uri as HTTP GET parameters.\n\n#### Authorization Code flow\n\nIf the `response_type` parameter is `code`, the following properties are returned:\n\n| PROPERTY | DESCRIPTION                                            |\n| -------- | ------------------------------------------------------ |\n| `code`   | An authorization code (40-character long string)       |\n| `state`  | If state was sent to the endpoint, this information is |\n\n### Error handling\n\nIf the authentication was not successful, there is no HTTP redirection: the user can stay on the Authorization Endpoint page until the correct credentials are entered. It is also possible to request a password reset if the password is forgotten.\n\nIf the user authenticates correctly, but interrupts the authorization flow, e.g. by pressing a Deny button on the authorization page, the browser is redirected to the redirect_uri with the following parameters:\n\n| NAME  | DESCRIPTION                                                      |\n| ----- | ---------------------------------------------------------------- |\n| error | `access_denied`                                                  |\n| state | If state was sent to the endpoint, this information is sent back |\n\n## Obtain an access token\n\n<Title>Token Endpoint</Title>\n\n|                        |                                    |\n| ---------------------- | ---------------------------------- |\n| Location               | https://video.ibm.com/oauth2/token |\n| Supported HTTP methods | POST                               |\n\n### Authorization Code flow\n\nWhen the client receives the authorization code the server-side component of the client calls the token endpoint to return the access token.\n\n#### Parameters\n\nThe following parameters must be set as HTTP POST parameters:\n\n| PARAMETER      | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                    |\n| -------------- | ------ | ---------- | -------------------------------------------------------------------------------------------------------------- |\n| `grant_type`   | string | REQUIRED   | MUST be `authorization_code` in this case.                                                                     |\n| `client_id`    | string | REQUIRED   | 40-character long string, provided by IBM Video Streaming                                                      |\n| `code`         | string | REQUIRED   | The authorization code received from the authorization endpoint                                                |\n| `redirect_uri` | string | REQUIRED   | The redirection URI used by the authorization server to return the authorization response in the previous step |\n\nIn addition to the parameters above, the client must provide its client secret (provided along with the client key) to authenticate itself. The authentication is done with HTTP Basic authorization method.\n\nExample HTTP header:\n\n```\nAuthorization: Basic bc345abc45d6789abcdef0123aef0126789def01\n```\n\n#### Success response\n\nThe response of the Token Endpoint is a JSON object.\n\nJSON response upon success:\n\n| NAME            | DESCRIPTION                                                                                                                                                                      |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `id_token`      | This property is only returned if your request included an openid scope. The value is a JSON Web Token (JWT) that contains digitally signed identity information about the user. |\n| `access_token`  | Access token (40-character long string)                                                                                                                                          |\n| `refresh_token` | A token that you can use to obtain a new access token                                                                                                                            |\n| `token_type`    | Will be Bearer Token                                                                                                                                                             |\n| `expires_in`    | Token's current lifetime, in seconds.                                                                                                                                            |\n\n#### Example\n\nThe following is an example of the authorization code flow.\n\n1 - The client opens a browser with the authorization endpoint:\n\n```\nhttps://authentication.video.ibm.com/authorize\n?response_type=code\n&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD\n&redirect_uri=http://example.com/get_access_token\n&device_name=My%20Device\n&scope=broadcaster\n&state=XYZ\n```\n\n2 - The user enters his/her credentials and presses the Allow button. The browser is redirected to the following URL:\n\n```\nhttp://example.com/get_access_token?code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&state=XYZ\n```\n\n3 - The page handler at http://example.com/get_access_token retrieves the Access Token using the Token Endpoint:\n\n```\nPOST /oauth2/token HTTP/1.1\n    Host: video.ibm.com\n    Authorization: Basic xxxxxxxxxxyyyyyyyyyywwwwwwwwwwzzzzzzzzzz\n    Content-Type: application/x-www-form-urlencoded\ngrant_type=authorization_code&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD\n    &code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&redirect_uri=http://example.com/get_access_token\n\n```\n\n4 - The response of token endpoint contains the access token:\n\n```\nHTTP/1.1 200 OK\n    Cache-Control: no-store\n    Content-Type:application/json; charset=UTF-8\n    {\"access_token\":\"ab345cdef123ef1267890abcdef04567890abcd1\", \"refresh_token\":\"cb12cdef123ef1267890abcdef04567890abcd1\",\"token_type\":\"bearer\", \"expires_in\":86400}\n\n```\n\n### Client Credentials flow\n\n#### Parameters\n\nThe following parameters must be set as HTTP POST parameters:\n\n| PARAMETER     | TYPE   | IMPORTANCE | DESCRIPTION                                                                               |\n| ------------- | ------ | ---------- | ----------------------------------------------------------------------------------------- |\n| `grant_type`  | string | REQUIRED   | MUST be `client_credentials` in this case.                                                |\n| `client_id`   | string | REQUIRED   | 40-character long string, provided by IBM Video Streaming.                                |\n| `device_name` | string | OPTIONAL   | device name                                                                               |\n| `scope`       | string | OPTIONAL   | `broadcaster` for broadcaster scope, or space separated URL encoded list of these strings |\n\nIn addition to the parameters above, the client must provide its client secret (provided along with the client key) to authenticate itself. The authentication is done with HTTP Basic authorization method.\n\nExample HTTP header:\n\n```\nAuthorization: Basic bc345abc45d6789abcdef0123aef0126789def01\n```\n\n<Title>Success response</Title>\n\n| NAME            | DESCRIPTION                                                                                                                                                                      |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `id_token`      | This property is only returned if your request included an openid scope. The value is a JSON Web Token (JWT) that contains digitally signed identity information about the user. |\n| `access_token`  | Access token (40-character long string)                                                                                                                                          |\n| `refresh_token` | A token that you can use to obtain a new access token                                                                                                                            |\n| `token_type`    | Will be bearer                                                                                                                                                                   |\n| `expires_in`    | Token's current lifetime, in seconds.                                                                                                                                            |\n\n<Title>Possible error responses</Title>\n\n| HTTP RESPONSE CODE  | ERROR VALUE              | ERROR CONDITIONS                                                                                                                            |\n| ------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------- |\n| 400 Bad Request     | `invalid_client`         | The referred client is missing, the secret is wrong or the authorization requester client and token requester client does not match.        |\n| 400 Bad Request     | `invalid_grant`          | The supplied authorization_code does not exist or expired                                                                                  |\n| 400 Bad Request     | `invalid_request`        | One or more required parameters are missing                                                                                                 |\n| 501 Not Implemented | `unsupported_grant_type` | The client asks for an unsupported grant type, currently only `authorization_code`, `client_credentials` and `refresh_token` are supported. |\n| 503 Server Error    | `server_error`           | The server cannot handle the request at this moment for some reason. Try again later.                                                       |\n\n## Refreshing access tokens\n\nWhen access tokens expire or become invalid, applications can obtain a new access token using a refresh token without prompting users to enter their login credentials again. The refresh token is returned as a response of one of the previous token requests. Because refresh tokens are last for 30 days, developers should ensure that strict storage requirements are in place to keep them from being leaked.\n\n#### Parameters\n\nThe following parameters must be set as HTTP POST parameters:\n\n| PARAMETER       | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                                   |\n| --------------- | ------ | ---------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `grant_type`    | string | REQUIRED   | MUST be `refresh_token`.                                                                                                      |\n| `refresh_token` | string | REQUIRED   | A token that you can use to obtain a new access token. Refresh tokens are valid for 30 days or until the user revokes access. |\n| `client_id`     | string | REQUIRED   | Client id provided by IBM Video Streaming.                                                                                    |\n\nIn addition to the parameters above, the client must provide its client secret (provided along with the client key) to authenticate if the client acts as a “web application”. Sending client secret can be omitted in case of “native application”.\nThe authentication is done with HTTP Basic authorization method.\n\nExample HTTP header:\n\n```\nAuthorization: Basic bc345abc45d6789abcdef0123aef0126789def01\n```\n\n#### Success response\n\nThe response of the Token Endpoint is a JSON object.\n\nJSON response upon success are:\n\n| NAME            | DESCRIPTION                                                                                                                                                                      |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `id_token`      | This property is only returned if your request included an openid scope. The value is a JSON Web Token (JWT) that contains digitally signed identity information about the user. |\n| `access_token`  | Access token (40-character long string)                                                                                                                                          |\n| `refresh_token` | A token that you can use to obtain a new access token                                                                                                                            |\n| `token_type`    | Will be Bearer Token                                                                                                                                                             |\n| `expires_in`    | Token's current lifetime, in seconds.                                                                                                                                            |\n\n#### Example\n\nPrevious token endpoint response:\n\n```json\n{\n  \"access_token\": \"ab345cdef123ef1267890abcdef04567890abcd1\",\n  \"refresh_token\": \"cb345cdef123ef1267890abcdef04567890abcd1\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 86400\n}\n```\n\nRefresh token request:\n\n```\nPOST /oauth2/token HTTP/1.1\nHost: video.ibm.com\nAuthorization: Basic xxxxxxxxxxyyyyyyyyyywwwwwwwwwwzzzzzzzzzz\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD&refresh_token=cb345cdef123ef1267890abcdef04567890abcd1\n```\n\nRefresh token response:\n\n```json\n{\n  \"access_token\": \"db345cdef123ef1267890abcdef04567890abcd1\",\n  \"refresh_token\": \"eb345cdef123ef1267890abcdef04567890abcd1\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 86400\n}\n```\n","type":"Mdx","contentDigest":"c985fcd821d1a166879cc501e5b48d80","owner":"gatsby-plugin-mdx","counter":334},"frontmatter":{"title":"Authentication","description":"Authentication"},"exports":{},"rawBody":"---\ntitle: Authentication\ndescription: Authentication\n---\n\n## Authorization flows\n\nThe OAuth 2.0 protocol provides several workflows for authorizing a user and obtaining an access token. It depends on the type and architecture of the client which flow is the most suitable. The following workflows are supported:\n\n- **Authorization Code:** Suitable for third-party websites which contain a client and a server component.\n- **Client Credentials:** Best choice for users developing server-side applications to manage their content or settings.\n\n### Authorization Code flow\n\n1. The user enters credentials to a secure login webpage.\n2. After logging in, the browser is redirected to a special URL (defined by the client), passing an authorization code in the URL.\n3. The third-party server obtains the access token with another HTTP request in the background, using the authorization code.\n\nSee the OAuth 2.0 Authorization Framework (https://tools.ietf.org/html/rfc6749) for details.\n\n### Client Credentials flow\n\nClient credentials can be generated on the Video Streaming dashboard. The client obtains an access token using the `client_id` and `client_secret`. With this token the user's server-side application can access the resources of the account which is identified by this client_id/client_secret pair.\n\n## Authorizing the user\n\n<Title>Authorization endpoint</Title>\n\n|                        |                                                |\n| ---------------------- | ---------------------------------------------- |\n| Location               | https://authentication.video.ibm.com/authorize |\n| Supported HTTP methods | GET, POST                                      |\n| Supported flows        | Authorization Code                             |\n\nThe authorization endpoint is a secure web page that authenticates the user. The client should show this page to the user in an embedded browser. When the user completes the login process the browser is redirected to a special URL. The client can capture this redirect call and obtain an authorization code.\n\n### Parameters\n\nThe parameters below specify the behavior of the authorization endpoint. These have to be set in GET or POST HTTP parameters.\n\n<Title>Supported OAuth 2.0 standard parameters</Title>\n\n| PARAMETER       | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                                                                                                                |\n| --------------- | ------ | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `response_type` | string | REQUIRED   | `code` for Authorization Code flow                                                                                                                                                                         |\n| `client_id`     | string | REQUIRED   | 40-character long string that identifies the client. Provided by IBM Video Streaming.                                                                                                                      |\n| `redirect_uri`  | string | REQUIRED   | The URI where the browser will redirect after the authentication process. This URI must be registered at IBM Video Streaming.                                                                              |\n| `state`         | string | OPTIONAL   | This value is sent as a GET parameter to the redirect_uri to maintain state between the request and callback. See the OAuth 2.0 Authorization Framework (https://tools.ietf.org/html/rfc6749) for details. |\n| `scope`         | string | OPTIONAL   | Whitelist-separated list of the requested scopes.                                                                                                                                                          |\n\n<Title>IBM Video Streaming specific extra parameters</Title>\n\n| PARAMETER     | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                                                                                                                                                                  |\n| ------------- | ------ | ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `device_name` | string | OPTIONAL   | Full product name of the client device or application. It is used for easy identification of the OAuth 2.0 token. The user will be able to review which clients are connected to his/her account, and revoke this access on the IBM Video Streaming website. |\n| `lang`        | string | OPTIONAL   | Show the authorization page in this locale (e.g. en_US); This parameter will also set the language of the newly registered users.                                                                                                                            |\n\n### Response values\n\nThe response values below are appended to the redirect_uri as HTTP GET parameters.\n\n#### Authorization Code flow\n\nIf the `response_type` parameter is `code`, the following properties are returned:\n\n| PROPERTY | DESCRIPTION                                            |\n| -------- | ------------------------------------------------------ |\n| `code`   | An authorization code (40-character long string)       |\n| `state`  | If state was sent to the endpoint, this information is |\n\n### Error handling\n\nIf the authentication was not successful, there is no HTTP redirection: the user can stay on the Authorization Endpoint page until the correct credentials are entered. It is also possible to request a password reset if the password is forgotten.\n\nIf the user authenticates correctly, but interrupts the authorization flow, e.g. by pressing a Deny button on the authorization page, the browser is redirected to the redirect_uri with the following parameters:\n\n| NAME  | DESCRIPTION                                                      |\n| ----- | ---------------------------------------------------------------- |\n| error | `access_denied`                                                  |\n| state | If state was sent to the endpoint, this information is sent back |\n\n## Obtain an access token\n\n<Title>Token Endpoint</Title>\n\n|                        |                                    |\n| ---------------------- | ---------------------------------- |\n| Location               | https://video.ibm.com/oauth2/token |\n| Supported HTTP methods | POST                               |\n\n### Authorization Code flow\n\nWhen the client receives the authorization code the server-side component of the client calls the token endpoint to return the access token.\n\n#### Parameters\n\nThe following parameters must be set as HTTP POST parameters:\n\n| PARAMETER      | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                    |\n| -------------- | ------ | ---------- | -------------------------------------------------------------------------------------------------------------- |\n| `grant_type`   | string | REQUIRED   | MUST be `authorization_code` in this case.                                                                     |\n| `client_id`    | string | REQUIRED   | 40-character long string, provided by IBM Video Streaming                                                      |\n| `code`         | string | REQUIRED   | The authorization code received from the authorization endpoint                                                |\n| `redirect_uri` | string | REQUIRED   | The redirection URI used by the authorization server to return the authorization response in the previous step |\n\nIn addition to the parameters above, the client must provide its client secret (provided along with the client key) to authenticate itself. The authentication is done with HTTP Basic authorization method.\n\nExample HTTP header:\n\n```\nAuthorization: Basic bc345abc45d6789abcdef0123aef0126789def01\n```\n\n#### Success response\n\nThe response of the Token Endpoint is a JSON object.\n\nJSON response upon success:\n\n| NAME            | DESCRIPTION                                                                                                                                                                      |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `id_token`      | This property is only returned if your request included an openid scope. The value is a JSON Web Token (JWT) that contains digitally signed identity information about the user. |\n| `access_token`  | Access token (40-character long string)                                                                                                                                          |\n| `refresh_token` | A token that you can use to obtain a new access token                                                                                                                            |\n| `token_type`    | Will be Bearer Token                                                                                                                                                             |\n| `expires_in`    | Token's current lifetime, in seconds.                                                                                                                                            |\n\n#### Example\n\nThe following is an example of the authorization code flow.\n\n1 - The client opens a browser with the authorization endpoint:\n\n```\nhttps://authentication.video.ibm.com/authorize\n?response_type=code\n&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD\n&redirect_uri=http://example.com/get_access_token\n&device_name=My%20Device\n&scope=broadcaster\n&state=XYZ\n```\n\n2 - The user enters his/her credentials and presses the Allow button. The browser is redirected to the following URL:\n\n```\nhttp://example.com/get_access_token?code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&state=XYZ\n```\n\n3 - The page handler at http://example.com/get_access_token retrieves the Access Token using the Token Endpoint:\n\n```\nPOST /oauth2/token HTTP/1.1\n    Host: video.ibm.com\n    Authorization: Basic xxxxxxxxxxyyyyyyyyyywwwwwwwwwwzzzzzzzzzz\n    Content-Type: application/x-www-form-urlencoded\ngrant_type=authorization_code&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD\n    &code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&redirect_uri=http://example.com/get_access_token\n\n```\n\n4 - The response of token endpoint contains the access token:\n\n```\nHTTP/1.1 200 OK\n    Cache-Control: no-store\n    Content-Type:application/json; charset=UTF-8\n    {\"access_token\":\"ab345cdef123ef1267890abcdef04567890abcd1\", \"refresh_token\":\"cb12cdef123ef1267890abcdef04567890abcd1\",\"token_type\":\"bearer\", \"expires_in\":86400}\n\n```\n\n### Client Credentials flow\n\n#### Parameters\n\nThe following parameters must be set as HTTP POST parameters:\n\n| PARAMETER     | TYPE   | IMPORTANCE | DESCRIPTION                                                                               |\n| ------------- | ------ | ---------- | ----------------------------------------------------------------------------------------- |\n| `grant_type`  | string | REQUIRED   | MUST be `client_credentials` in this case.                                                |\n| `client_id`   | string | REQUIRED   | 40-character long string, provided by IBM Video Streaming.                                |\n| `device_name` | string | OPTIONAL   | device name                                                                               |\n| `scope`       | string | OPTIONAL   | `broadcaster` for broadcaster scope, or space separated URL encoded list of these strings |\n\nIn addition to the parameters above, the client must provide its client secret (provided along with the client key) to authenticate itself. The authentication is done with HTTP Basic authorization method.\n\nExample HTTP header:\n\n```\nAuthorization: Basic bc345abc45d6789abcdef0123aef0126789def01\n```\n\n<Title>Success response</Title>\n\n| NAME            | DESCRIPTION                                                                                                                                                                      |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `id_token`      | This property is only returned if your request included an openid scope. The value is a JSON Web Token (JWT) that contains digitally signed identity information about the user. |\n| `access_token`  | Access token (40-character long string)                                                                                                                                          |\n| `refresh_token` | A token that you can use to obtain a new access token                                                                                                                            |\n| `token_type`    | Will be bearer                                                                                                                                                                   |\n| `expires_in`    | Token's current lifetime, in seconds.                                                                                                                                            |\n\n<Title>Possible error responses</Title>\n\n| HTTP RESPONSE CODE  | ERROR VALUE              | ERROR CONDITIONS                                                                                                                            |\n| ------------------- | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------- |\n| 400 Bad Request     | `invalid_client`         | The referred client is missing, the secret is wrong or the authorization requester client and token requester client does not match.        |\n| 400 Bad Request     | `invalid_grant`          | The supplied authorization_code does not exist or expired                                                                                  |\n| 400 Bad Request     | `invalid_request`        | One or more required parameters are missing                                                                                                 |\n| 501 Not Implemented | `unsupported_grant_type` | The client asks for an unsupported grant type, currently only `authorization_code`, `client_credentials` and `refresh_token` are supported. |\n| 503 Server Error    | `server_error`           | The server cannot handle the request at this moment for some reason. Try again later.                                                       |\n\n## Refreshing access tokens\n\nWhen access tokens expire or become invalid, applications can obtain a new access token using a refresh token without prompting users to enter their login credentials again. The refresh token is returned as a response of one of the previous token requests. Because refresh tokens are last for 30 days, developers should ensure that strict storage requirements are in place to keep them from being leaked.\n\n#### Parameters\n\nThe following parameters must be set as HTTP POST parameters:\n\n| PARAMETER       | TYPE   | IMPORTANCE | DESCRIPTION                                                                                                                   |\n| --------------- | ------ | ---------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `grant_type`    | string | REQUIRED   | MUST be `refresh_token`.                                                                                                      |\n| `refresh_token` | string | REQUIRED   | A token that you can use to obtain a new access token. Refresh tokens are valid for 30 days or until the user revokes access. |\n| `client_id`     | string | REQUIRED   | Client id provided by IBM Video Streaming.                                                                                    |\n\nIn addition to the parameters above, the client must provide its client secret (provided along with the client key) to authenticate if the client acts as a “web application”. Sending client secret can be omitted in case of “native application”.\nThe authentication is done with HTTP Basic authorization method.\n\nExample HTTP header:\n\n```\nAuthorization: Basic bc345abc45d6789abcdef0123aef0126789def01\n```\n\n#### Success response\n\nThe response of the Token Endpoint is a JSON object.\n\nJSON response upon success are:\n\n| NAME            | DESCRIPTION                                                                                                                                                                      |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `id_token`      | This property is only returned if your request included an openid scope. The value is a JSON Web Token (JWT) that contains digitally signed identity information about the user. |\n| `access_token`  | Access token (40-character long string)                                                                                                                                          |\n| `refresh_token` | A token that you can use to obtain a new access token                                                                                                                            |\n| `token_type`    | Will be Bearer Token                                                                                                                                                             |\n| `expires_in`    | Token's current lifetime, in seconds.                                                                                                                                            |\n\n#### Example\n\nPrevious token endpoint response:\n\n```json\n{\n  \"access_token\": \"ab345cdef123ef1267890abcdef04567890abcd1\",\n  \"refresh_token\": \"cb345cdef123ef1267890abcdef04567890abcd1\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 86400\n}\n```\n\nRefresh token request:\n\n```\nPOST /oauth2/token HTTP/1.1\nHost: video.ibm.com\nAuthorization: Basic xxxxxxxxxxyyyyyyyyyywwwwwwwwwwzzzzzzzzzz\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD&refresh_token=cb345cdef123ef1267890abcdef04567890abcd1\n```\n\nRefresh token response:\n\n```json\n{\n  \"access_token\": \"db345cdef123ef1267890abcdef04567890abcd1\",\n  \"refresh_token\": \"eb345cdef123ef1267890abcdef04567890abcd1\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 86400\n}\n```\n","fileAbsolutePath":"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/src/pages/api-basics-authentication.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2203542295","2746626797","3037994772","559098832","768070550"]}