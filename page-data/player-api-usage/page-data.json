{"componentChunkName":"component---src-pages-player-api-usage-mdx","path":"/player-api-usage/","result":{"pageContext":{"frontmatter":{"title":"Usage","description":"Usage of the Player API","hiddenFromSearch":true},"relativePagePath":"/player-api-usage.mdx","titleType":"page","MdxNode":{"id":"a2bb7f62-a58c-53b9-8309-6fe97dc1aea5","children":[],"parent":"0a624f31-3ffe-5e8f-8f2e-f700a38db385","internal":{"content":"---\ntitle: Usage\ndescription: Usage of the Player API\nhiddenFromSearch: true\n---\n\n## Overview\n\nThe Player API enables sites using the [IBM Video Streaming](https://video.ibm.com/) embed iframe to build and adapt on the embed live player.\n\nThe Player API provides basic methods to control the live stream or recorded video playback and enables the user to access essential events of the live stream or the played video.\n\nThe Player API requires the [postMessage](http://www.w3.org/TR/webmessaging/) DOM API, it won't work in browsers that does not support the postMessage API.\n\n## Usage\n\nFirst, a valid IBM Video Streaming embed iframe will be needed to use the Embed API. Log in to your managed <a href=\"https://video.ibm.com/\" target=\"_blank\">IBM Video Streaming</a> account as an administrator of your channel. Then navigate to the Embed Configurator page on your Dashboard by selecting the \"Embed\" option as seen below:\n\n![Embed Configurator Page Location](/static-content/embed-configurator-page-location.png)\n\nAfter selecting an option with the IBM Video Streaming Player, the Embed Configurator is displayed. The Configurator enables channel administrators to set the properties of the Player embed. When it's done, the proper iframe HTML element can be copied to the clipboard with the button which is highlighted in the next picture.\n\n![Copy To Clipboard Button Location](/static-content/embed-configurator-copy-to-clipboard.png)\n\nThe next step is to include a unique ID in this iframe element. We will use \"PlayerIframe\".\n\nDownload the Player API from npm:\n```bash\nnpm install ibm-video-streaming-web-player-api\n```\n\nCreate an instance of the Embed API by providing the ID of the iframe. The iframe code should look like this:\n\n```html\n<iframe id=\"PlayerIframe\" src=\"https://video.ibm.com/embed/recorded/131906526\" width=\"640\" height=\"480\" allowfullscreen webkitallowfullscreen referrerpolicy=\"no-referrer-when-downgrade\"></iframe>\n```\n```js\nlet viewer = PlayerAPI('PlayerIframe');\n```\n\nContent Owners can customize their Player's user experience by [using query parameters](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#parameters) in the src url above. The list of available URL parameters and their effects can be found here: [URL Parameters](/player-api-url-parameters)\n\n## Method Calls\n\nUsing the `callMethod` function one can call command methods on the player. Available commands:\n\n### play\n\nStarts playing the currently loaded channel or video.\n\n###### Example\n\n```js\nviewer.callMethod('play');\n```\n\n### pause\n\nPauses the live stream, or the playback of a video.\n\n###### Example\n\n```js\nviewer.callMethod('pause');\n```\n\n### stop\n\nPauses the live stream. For on demand videos it stops and jumps back to the start.\n\n###### Example\n\n```js\nviewer.callMethod('stop');\n```\n\n### load\n\nLoads a channel or a video in the player. Requires two additional arguments:\n\n- `type` - content type ('channel' or 'video')\n- `id` - media id\n\n###### Example\n\n```js\nviewer.callMethod('load', 'video', 5903947);\nviewer.callMethod('load', 'channel', 23935269);\n```\n\n### seek\n\nJumps to given position in a recorded video. Requires one argument:\n\n- `position` - target time in seconds\n\n###### Example\n\n```js\nviewer.callMethod('seek', 180);\n```\n\n### volume\n\nSets the playback sound volume. Requires one argument:\n\n- `volume` - percent between 0 and 100\n\n###### Example\n\n```js\nviewer.callMethod('volume', 0); //mute\n```\n\n### quality\n\nSets the stream quality, if available. Requires one argument:\n\n-  an `id` key from received quality options in `quality` event\n\n###### Example\n\n```js\nviewer.callMethod('quality', 0); //set to highest quality\n```\n\n### cc (closed caption)\n\nDisplays the selected closed caption if available. You can use the 'None' option by using -1 as the argument. Otherwise it requires this argument:\n\n-  an `index` key from the received closed caption object in `cc` event\n\n###### Example\n\n```js\nviewer.callMethod('cc', 1); //enables the closed caption with index 1\nviewer.callMethod('cc', -1); //disables the closed caption\n```\n\n### webkitEnterFullscreen (iOS)\n\nCalls `webkitEnterFullscreen` on the `HTMLVideoElement` to access the video's native fullscreen UI.\n\n###### Example\n\n```js\nviewer.callMethod('webkitEnterFullscreen');\n```\n\n## Showing and hiding components\n\nToggle the visibility of different components by calling one of the methods below:\n\n- `hideAudioSwitch`\n- `hideCTA`\n- `hidePlayScreen`\n- `hideCaptionSearch`\n- `hideChapters`\n- `hideCustomLogo`\n- `hideLogo`\n- `hideShare`\n- `hideFacebook`\n- `hideTwitter`\n- `hideCopyLink`\n- `hideEmbedCode`\n- `hideCC`\n- `hideTitle`\n- `hideViewerNumbers`\n- `hideLiveBadge`\n- `hideReplayBadge`\n- `hideFullscreen`\n- `hidePlaybackSpeed`\n- `hideSeekbar`\n\nThe default value of all of them is **false**.\n\n###### Example\n\n```js\nviewer.callMethod('hideCTA',true);\n```\n\n## getProperty\n\nRetrieves a property of the embed player. This method is __asynchronous__, the data will be passed to a callback function, given as argument.\n\nAccessible properties by `getProperty`:\n\n### duration\n\nGet the video duration in `seconds.milliseconds` precision.\n\n###### Example\n\n```js\nviewer.getProperty('duration', function (duration) {\n    ...\n}); //passed value is e.g. 120.345\n```\n\n### viewers\n\nGet the current viewer count for the loaded live stream. Doesn't return anything in case of recorded videos.\n\n###### Example\n\n```js\nviewer.getProperty('viewers', function (viewerNumber) {\n    ...\n});\n```\n\n### allTimeTotalViewers\n\nGet the accumulated total viewer number for the loaded channel. Doesn't return anything in case of recorded videos.\n\n###### Example\n\n```js\nviewer.getProperty('allTimeTotalViewers', function (allTimeTotalViewers) {\n    ...\n});\n```\n\n### progress\n\nGet the current progress for recorded video playback, in seconds.\n\n###### Example\n\n```js\nviewer.getProperty('progress', function (progress) {\n    ...\n});\n```\n\n### content\n\nGet the current content type and ID as an array.\n\n###### Example\n\n```js\nviewer.getProperty('content', function (content) {\n    // content == ['channel', 23935269]\n    // or\n    // content == ['recorded', 12345678]\n    ...\n});\n```\n\n### playingContent\n\nGet the actual content type and ID as an array. This will return the currently played off-air video's ID if the loaded content is an off-air channel or with the channel ID if the channel is live.\n\n###### Example\n\n```js\nviewer.callMethod('load', 'channel', 23935269);\n// ...\nviewer.getProperty('playingContent', function (content) {\n    // content == ['channel', 23935269]\n    //  - if it's live, or\n    // content == ['recorded', 123456]\n    //  - if it's off-air and has off-air video content, or\n    // content == []\n    //  - if it's off-air and doesn't have off-air video content\n    ...\n});\n```\n\n### volume\n\nGet the player volume. This will return the actual value of volume in percent.\n\n###### Example\n\n```js\nviewer.getProperty('volume', function (volume) {\n    // volume == 0 for muted playback\n    ...\n});\n```\n\n## addListener & removeListener\n\nThe embedded player dispatches several events during playback. This method adds or removes event handlers to these events.\n\nThe event handler callback receives two arguments:\n\n- `type` the type of the event\n- `data` optional data sent along the event (this can be an array, object or boolean variable)\n\nFor example:\n\n```js\nviewer.addListener('playing', function (type, data) {\n    console.log(type); // \"playing\"\n    console.log(data); // true or false\n});\n```\n\nAvailable events for `addListener` and `removeListener`:\n\n### live\n\nCalled when the currently loaded offline channel becomes live.\n\n###### Example\n\n```js\nviewer.addListener('live', callback);\n```\n\n### offline\n\nCalled when the currently loaded live channel goes offline.\n\n###### Example\n\n```js\nviewer.addListener('offline', callback);\n```\n\n### finished\n\nCalled when the currently loaded and played recorded video reaches its end.\n\n###### Example\n\n```js\nviewer.addListener('finished', callback);\n```\n\n### contentAvailable\n\nCalled when all metadata required to start playback is available.\n\n###### Example\n\n```js\nviewer.addListener('contentAvailable', callback);\n```\n\n### playing\n\nCalled when the currently loaded content playback is started or stopped. Sends data along the event:\n\n- `playing` (boolean)\n\n###### Example\n\n```js\nviewer.addListener('playing', function(type, playing) {\n    ...\n});\n```\n\n### seekStarted\n\nCalled when a user or system initiated seek started.\n\n- `from` (number) - previous position in sec\n- `to` (number) - next position in sec\n- `initiator` (string) - user|system\n\n###### Example\n\n```js\nviewer.addListener('seekStarted', function(type, data) {\n    const { from, to, initiator } = data;\n    ...\n});\n```\n\n### seekCompleted\n\nCalled when a user or system initiated seek completed.\n\n###### Example\n\n```js\nviewer.addListener('seekCompleted', callback);\n```\n\n### size\n\nCalled when the stream size is available. Sent data is the size of the calculated embed iframe according to the player width, and the stream aspect ratio. The player bar height is included, if the controls are visible.\nSends data along the event:\n\n- `size` (array) as [ `width`, `height` ] in pixels\n\n###### Example\n\n```js\nviewer.addListener('size', callback);\n```\n\n### quality\n\nFired when the stream quality options are available.\n\nReceives the following array of quality based objects\n\n- `id` (number) the ID with which the `quality` method can be called\n- `codec` (string)\n- `width` (number) width of the quality version in pixels\n- `height` (number) height of the quality version in pixels\n- `bitrate` (number) actual bitrate value in kbps\n- `transcoded` (boolean) is this quality one of the transcoded versions or the original ingested quality\n- `label` (object): its `text` key has the text to show to users on control UI, eg.: \"480p\"\n- `selected` (boolean) is this quality set to display\n\n###### Example\n\n```js\nviewer.addListener('quality', function(type, qualities) {\n    ...\n});\n```\nExample quality object from the quality array:\n```json\n{\n    \"id\": 0,\n    \"codec\": \"avc1.4d001f\",\n    \"bitrate\": 1406,\n    \"transcoded\": false,\n    \"width\": 1280,\n    \"height\": 720,\n    \"label\": {\n      \"text\": \"720p\",\n      \"suffix\": \" HD\",\n      \"bitrate\": \" @ 1.4 Mbps\"\n    },\n    \"selected\": false\n    ...\n}\n```\n\n### cc\n\nFired when there are closed captions available on the stream.\n\nReturns an array containing closed captions as objects.\n\n- `index` (number) unique index of the closed caption\n- `label` (string) displayed label of the closed caption\n- `language` (string) ISO language code of the closed caption\n- `country` (string) ISO code of country\n- `active` (boolean) height of the quality version in pixels\n\n###### Example\n\n```js\nviewer.addListener('cc', function(type, captions) {\n    ...\n});\n```\nExample cc object from the cc array:\n```json\n{\n    \"index\": 0,\n    \"label\": \"Spanish\",\n    \"language\": \"es\",\n    \"country\": \"00\",\n    \"active\": true\n}\n```\n\n### content\n\nCalled when the video player content changes for some reason. Same data as received in `getProperty('content')`\n\nReceived arguments: `data` (array)\n\n###### Example\n\n```js\nviewer.addListener('content', callback);\n```\n\n### liveCtaUpdate\n\nFired when there is a live CTA (call to action) video overlay available on the stream.\n\nReturns an object:\n\n- `buttonText` (string) text of the button\n- `buttonUrl` (string) URL of CTA\n- `description` (string) description of CTA\n- `id` (integer) ID of CTA\n- `imageUrl` (string) URL of the image\n- `title` (string) title of CTA\n\n###### Example\n\n```js\nviewer.addListener('liveCtaUpdate', callback);\n```\n\nExample CTA object when activated:\n\n```json\n{\n    \"activate\": {\n        \"buttonText\": \"Click here!\",\n        \"buttonUrl\": \"https://video.ibm.com\",\n        \"description\": \"The Future of Video with IBM Video Streaming\",\n        \"id\": 123,\n        \"imageUrl\": \"URL of image\",\n        \"title\": \"IBM Video Streaming\"\n    }\n}\n```\n\n### error\n\nFired when an unexpected event occures.\n\nReturns an object:\n\n- `name` (string) error name\n- `message` (string) error message\n\nAvailable error type(s):\n\n- `autoplayRejected`\n- `webkitEnterFullscreenRejected`\n\n###### Example\n\n```js\nviewer.addListener('error', function(type, errorEvent) {\n    switch (errorEvent.name) {\n        case 'autoplayRejected':\n            // TODO: display fallback button\n            console.log(errorEvent.message);\n            break;\n        case 'webkitEnterFullscreenRejected':\n            // TODO: browser prevented the request, user gesture is needed\n            console.log(errorEvent.message);\n            break;\n        // no default\n    }\n});\n```\n","type":"Mdx","contentDigest":"8f93f2ccce04004a96d0967bb8baa0e8","owner":"gatsby-plugin-mdx","counter":241},"frontmatter":{"title":"Usage","description":"Usage of the Player API","hiddenFromSearch":true},"exports":{},"rawBody":"---\ntitle: Usage\ndescription: Usage of the Player API\nhiddenFromSearch: true\n---\n\n## Overview\n\nThe Player API enables sites using the [IBM Video Streaming](https://video.ibm.com/) embed iframe to build and adapt on the embed live player.\n\nThe Player API provides basic methods to control the live stream or recorded video playback and enables the user to access essential events of the live stream or the played video.\n\nThe Player API requires the [postMessage](http://www.w3.org/TR/webmessaging/) DOM API, it won't work in browsers that does not support the postMessage API.\n\n## Usage\n\nFirst, a valid IBM Video Streaming embed iframe will be needed to use the Embed API. Log in to your managed <a href=\"https://video.ibm.com/\" target=\"_blank\">IBM Video Streaming</a> account as an administrator of your channel. Then navigate to the Embed Configurator page on your Dashboard by selecting the \"Embed\" option as seen below:\n\n![Embed Configurator Page Location](/static-content/embed-configurator-page-location.png)\n\nAfter selecting an option with the IBM Video Streaming Player, the Embed Configurator is displayed. The Configurator enables channel administrators to set the properties of the Player embed. When it's done, the proper iframe HTML element can be copied to the clipboard with the button which is highlighted in the next picture.\n\n![Copy To Clipboard Button Location](/static-content/embed-configurator-copy-to-clipboard.png)\n\nThe next step is to include a unique ID in this iframe element. We will use \"PlayerIframe\".\n\nDownload the Player API from npm:\n```bash\nnpm install ibm-video-streaming-web-player-api\n```\n\nCreate an instance of the Embed API by providing the ID of the iframe. The iframe code should look like this:\n\n```html\n<iframe id=\"PlayerIframe\" src=\"https://video.ibm.com/embed/recorded/131906526\" width=\"640\" height=\"480\" allowfullscreen webkitallowfullscreen referrerpolicy=\"no-referrer-when-downgrade\"></iframe>\n```\n```js\nlet viewer = PlayerAPI('PlayerIframe');\n```\n\nContent Owners can customize their Player's user experience by [using query parameters](https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#parameters) in the src url above. The list of available URL parameters and their effects can be found here: [URL Parameters](/player-api-url-parameters)\n\n## Method Calls\n\nUsing the `callMethod` function one can call command methods on the player. Available commands:\n\n### play\n\nStarts playing the currently loaded channel or video.\n\n###### Example\n\n```js\nviewer.callMethod('play');\n```\n\n### pause\n\nPauses the live stream, or the playback of a video.\n\n###### Example\n\n```js\nviewer.callMethod('pause');\n```\n\n### stop\n\nPauses the live stream. For on demand videos it stops and jumps back to the start.\n\n###### Example\n\n```js\nviewer.callMethod('stop');\n```\n\n### load\n\nLoads a channel or a video in the player. Requires two additional arguments:\n\n- `type` - content type ('channel' or 'video')\n- `id` - media id\n\n###### Example\n\n```js\nviewer.callMethod('load', 'video', 5903947);\nviewer.callMethod('load', 'channel', 23935269);\n```\n\n### seek\n\nJumps to given position in a recorded video. Requires one argument:\n\n- `position` - target time in seconds\n\n###### Example\n\n```js\nviewer.callMethod('seek', 180);\n```\n\n### volume\n\nSets the playback sound volume. Requires one argument:\n\n- `volume` - percent between 0 and 100\n\n###### Example\n\n```js\nviewer.callMethod('volume', 0); //mute\n```\n\n### quality\n\nSets the stream quality, if available. Requires one argument:\n\n-  an `id` key from received quality options in `quality` event\n\n###### Example\n\n```js\nviewer.callMethod('quality', 0); //set to highest quality\n```\n\n### cc (closed caption)\n\nDisplays the selected closed caption if available. You can use the 'None' option by using -1 as the argument. Otherwise it requires this argument:\n\n-  an `index` key from the received closed caption object in `cc` event\n\n###### Example\n\n```js\nviewer.callMethod('cc', 1); //enables the closed caption with index 1\nviewer.callMethod('cc', -1); //disables the closed caption\n```\n\n### webkitEnterFullscreen (iOS)\n\nCalls `webkitEnterFullscreen` on the `HTMLVideoElement` to access the video's native fullscreen UI.\n\n###### Example\n\n```js\nviewer.callMethod('webkitEnterFullscreen');\n```\n\n## Showing and hiding components\n\nToggle the visibility of different components by calling one of the methods below:\n\n- `hideAudioSwitch`\n- `hideCTA`\n- `hidePlayScreen`\n- `hideCaptionSearch`\n- `hideChapters`\n- `hideCustomLogo`\n- `hideLogo`\n- `hideShare`\n- `hideFacebook`\n- `hideTwitter`\n- `hideCopyLink`\n- `hideEmbedCode`\n- `hideCC`\n- `hideTitle`\n- `hideViewerNumbers`\n- `hideLiveBadge`\n- `hideReplayBadge`\n- `hideFullscreen`\n- `hidePlaybackSpeed`\n- `hideSeekbar`\n\nThe default value of all of them is **false**.\n\n###### Example\n\n```js\nviewer.callMethod('hideCTA',true);\n```\n\n## getProperty\n\nRetrieves a property of the embed player. This method is __asynchronous__, the data will be passed to a callback function, given as argument.\n\nAccessible properties by `getProperty`:\n\n### duration\n\nGet the video duration in `seconds.milliseconds` precision.\n\n###### Example\n\n```js\nviewer.getProperty('duration', function (duration) {\n    ...\n}); //passed value is e.g. 120.345\n```\n\n### viewers\n\nGet the current viewer count for the loaded live stream. Doesn't return anything in case of recorded videos.\n\n###### Example\n\n```js\nviewer.getProperty('viewers', function (viewerNumber) {\n    ...\n});\n```\n\n### allTimeTotalViewers\n\nGet the accumulated total viewer number for the loaded channel. Doesn't return anything in case of recorded videos.\n\n###### Example\n\n```js\nviewer.getProperty('allTimeTotalViewers', function (allTimeTotalViewers) {\n    ...\n});\n```\n\n### progress\n\nGet the current progress for recorded video playback, in seconds.\n\n###### Example\n\n```js\nviewer.getProperty('progress', function (progress) {\n    ...\n});\n```\n\n### content\n\nGet the current content type and ID as an array.\n\n###### Example\n\n```js\nviewer.getProperty('content', function (content) {\n    // content == ['channel', 23935269]\n    // or\n    // content == ['recorded', 12345678]\n    ...\n});\n```\n\n### playingContent\n\nGet the actual content type and ID as an array. This will return the currently played off-air video's ID if the loaded content is an off-air channel or with the channel ID if the channel is live.\n\n###### Example\n\n```js\nviewer.callMethod('load', 'channel', 23935269);\n// ...\nviewer.getProperty('playingContent', function (content) {\n    // content == ['channel', 23935269]\n    //  - if it's live, or\n    // content == ['recorded', 123456]\n    //  - if it's off-air and has off-air video content, or\n    // content == []\n    //  - if it's off-air and doesn't have off-air video content\n    ...\n});\n```\n\n### volume\n\nGet the player volume. This will return the actual value of volume in percent.\n\n###### Example\n\n```js\nviewer.getProperty('volume', function (volume) {\n    // volume == 0 for muted playback\n    ...\n});\n```\n\n## addListener & removeListener\n\nThe embedded player dispatches several events during playback. This method adds or removes event handlers to these events.\n\nThe event handler callback receives two arguments:\n\n- `type` the type of the event\n- `data` optional data sent along the event (this can be an array, object or boolean variable)\n\nFor example:\n\n```js\nviewer.addListener('playing', function (type, data) {\n    console.log(type); // \"playing\"\n    console.log(data); // true or false\n});\n```\n\nAvailable events for `addListener` and `removeListener`:\n\n### live\n\nCalled when the currently loaded offline channel becomes live.\n\n###### Example\n\n```js\nviewer.addListener('live', callback);\n```\n\n### offline\n\nCalled when the currently loaded live channel goes offline.\n\n###### Example\n\n```js\nviewer.addListener('offline', callback);\n```\n\n### finished\n\nCalled when the currently loaded and played recorded video reaches its end.\n\n###### Example\n\n```js\nviewer.addListener('finished', callback);\n```\n\n### contentAvailable\n\nCalled when all metadata required to start playback is available.\n\n###### Example\n\n```js\nviewer.addListener('contentAvailable', callback);\n```\n\n### playing\n\nCalled when the currently loaded content playback is started or stopped. Sends data along the event:\n\n- `playing` (boolean)\n\n###### Example\n\n```js\nviewer.addListener('playing', function(type, playing) {\n    ...\n});\n```\n\n### seekStarted\n\nCalled when a user or system initiated seek started.\n\n- `from` (number) - previous position in sec\n- `to` (number) - next position in sec\n- `initiator` (string) - user|system\n\n###### Example\n\n```js\nviewer.addListener('seekStarted', function(type, data) {\n    const { from, to, initiator } = data;\n    ...\n});\n```\n\n### seekCompleted\n\nCalled when a user or system initiated seek completed.\n\n###### Example\n\n```js\nviewer.addListener('seekCompleted', callback);\n```\n\n### size\n\nCalled when the stream size is available. Sent data is the size of the calculated embed iframe according to the player width, and the stream aspect ratio. The player bar height is included, if the controls are visible.\nSends data along the event:\n\n- `size` (array) as [ `width`, `height` ] in pixels\n\n###### Example\n\n```js\nviewer.addListener('size', callback);\n```\n\n### quality\n\nFired when the stream quality options are available.\n\nReceives the following array of quality based objects\n\n- `id` (number) the ID with which the `quality` method can be called\n- `codec` (string)\n- `width` (number) width of the quality version in pixels\n- `height` (number) height of the quality version in pixels\n- `bitrate` (number) actual bitrate value in kbps\n- `transcoded` (boolean) is this quality one of the transcoded versions or the original ingested quality\n- `label` (object): its `text` key has the text to show to users on control UI, eg.: \"480p\"\n- `selected` (boolean) is this quality set to display\n\n###### Example\n\n```js\nviewer.addListener('quality', function(type, qualities) {\n    ...\n});\n```\nExample quality object from the quality array:\n```json\n{\n    \"id\": 0,\n    \"codec\": \"avc1.4d001f\",\n    \"bitrate\": 1406,\n    \"transcoded\": false,\n    \"width\": 1280,\n    \"height\": 720,\n    \"label\": {\n      \"text\": \"720p\",\n      \"suffix\": \" HD\",\n      \"bitrate\": \" @ 1.4 Mbps\"\n    },\n    \"selected\": false\n    ...\n}\n```\n\n### cc\n\nFired when there are closed captions available on the stream.\n\nReturns an array containing closed captions as objects.\n\n- `index` (number) unique index of the closed caption\n- `label` (string) displayed label of the closed caption\n- `language` (string) ISO language code of the closed caption\n- `country` (string) ISO code of country\n- `active` (boolean) height of the quality version in pixels\n\n###### Example\n\n```js\nviewer.addListener('cc', function(type, captions) {\n    ...\n});\n```\nExample cc object from the cc array:\n```json\n{\n    \"index\": 0,\n    \"label\": \"Spanish\",\n    \"language\": \"es\",\n    \"country\": \"00\",\n    \"active\": true\n}\n```\n\n### content\n\nCalled when the video player content changes for some reason. Same data as received in `getProperty('content')`\n\nReceived arguments: `data` (array)\n\n###### Example\n\n```js\nviewer.addListener('content', callback);\n```\n\n### liveCtaUpdate\n\nFired when there is a live CTA (call to action) video overlay available on the stream.\n\nReturns an object:\n\n- `buttonText` (string) text of the button\n- `buttonUrl` (string) URL of CTA\n- `description` (string) description of CTA\n- `id` (integer) ID of CTA\n- `imageUrl` (string) URL of the image\n- `title` (string) title of CTA\n\n###### Example\n\n```js\nviewer.addListener('liveCtaUpdate', callback);\n```\n\nExample CTA object when activated:\n\n```json\n{\n    \"activate\": {\n        \"buttonText\": \"Click here!\",\n        \"buttonUrl\": \"https://video.ibm.com\",\n        \"description\": \"The Future of Video with IBM Video Streaming\",\n        \"id\": 123,\n        \"imageUrl\": \"URL of image\",\n        \"title\": \"IBM Video Streaming\"\n    }\n}\n```\n\n### error\n\nFired when an unexpected event occures.\n\nReturns an object:\n\n- `name` (string) error name\n- `message` (string) error message\n\nAvailable error type(s):\n\n- `autoplayRejected`\n- `webkitEnterFullscreenRejected`\n\n###### Example\n\n```js\nviewer.addListener('error', function(type, errorEvent) {\n    switch (errorEvent.name) {\n        case 'autoplayRejected':\n            // TODO: display fallback button\n            console.log(errorEvent.message);\n            break;\n        case 'webkitEnterFullscreenRejected':\n            // TODO: browser prevented the request, user gesture is needed\n            console.log(errorEvent.message);\n            break;\n        // no default\n    }\n});\n```\n","fileAbsolutePath":"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/src/pages/player-api-usage.mdx"}}},"staticQueryHashes":["1364590287","137577622","2102389209","2203542295","2456312558","2746626797","3037994772","768070550"]}