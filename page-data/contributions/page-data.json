{
    "componentChunkName": "component---src-pages-contributions-mdx",
    "path": "/contributions/",
    "result": {"pageContext":{"frontmatter":{"title":"Contributions","description":"Instructions for developing and contributing to the theme"},"relativePagePath":"/contributions.mdx","titleType":"page","MdxNode":{"id":"6fb3d00f-ee89-53b4-8da6-cc31abede519","children":[],"parent":"f981ffe3-8f07-5ad1-8933-95cc4ec811ab","internal":{"content":"---\ntitle: Contributions\ndescription: Instructions for developing and contributing to the theme\n---\n\n<PageDescription>\n\nUse this guide to contribute to the theme. We’ll show you how to get the development environment set up as quickly as possible so you can start contributing.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Project setup</AnchorLink>\n  <AnchorLink>Development</AnchorLink>\n  <AnchorLink>Work in a branch</AnchorLink>\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\n  <AnchorLink>VS Code</AnchorLink>\n  <AnchorLink>Test pages</AnchorLink>\n  <AnchorLink>Publishing</AnchorLink>\n</AnchorLinks>\n\n## Project setup\n\n1. Go to [gatsby-theme-carbon](https://github.com/carbon-design-system/gatsby-theme-carbon) and click the `Fork` button in the top-right corner.\n\n1. After it’s finished, click on the `Clone or Download` button and copy the contents.\n\n1. In your terminal, clone the repo into your directory of choice\n\n   ```sh\n   git clone [PASTE_URL_HERE]\n   cd gatsby-theme-carbon\n   ```\n\n1. When you clone your forked repo the `origin` is set to your fork by default. You’ll want to add a remote that points to the upstream repo.\n\n   ```sh\n   git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n   ```\n\n1. In your terminal, verify that the remotes have been set\n\n   ```sh\n   git remote -v\n   ```\n\n## Development\n\nWe use [yarn](https://yarnpkg.com/lang/en/docs/install/) and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that’s closely linked to the theme with minimal setup. Run `yarn install` to install all of the projects dependencies.\n\nThis project has two packages: the actual theme package (`gatsby-theme-carbon`) and the `example` package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The `example` package also serves as the theme’s documentation and [website](https://gatsby-theme-carbon.now.sh); it’s deployed on every merge to master.\n\nNew theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory.\n\n<Title>Development scripts</Title>\n\n- `yarn dev` – start the development environment\n- `yarn dev:clean` – clear cache and restart dev\n- `yarn format` – format your code with prettier\n- `yarn lint` - check for errors in your javascript\n- `yarn test:prefix` – build and serve with a path prefix\n\n## Work in a branch\n\nYou should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don’t accidentally commit anything to your master branch and get stuck when trying to open a pull request.\n\n```sh\ngit checkout master\ngit pull upstream master\ngit checkout -b my-branch-name\n```\n\nWhen you’re ready to open a pull request, push to your origin remote.\n\n```sh\ngit push origin my-branch-name\n```\n\nYou’ll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.\n\n## Sass and CSS Modules\n\nFor internal theme components we use [Sass](https://sass-lang.com/documentation/syntax) and [CSS Modules](https://github.com/css-modules/css-modules#css-modules). This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each `.scss` file will be supplied with all of the Carbon Sass [variables](https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss): color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.\n\nYou should colocate your stylesheet with the component(s) that import it. If the component is `TreeView` then the stylesheet should be `TreeView.module.scss`. All contained within the `TreeView` directory.\n\n### CSS Modules\n\nYou don’t need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the `.scss` file.\n\n```scss path=TreeView.module.scss\n.treeView {\n  color: $text-01;\n}\n```\n\n```jsx path=TreeView.js\nimport { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;\n```\n\nFor conditionally applying class names, use the `classname` library. Note how we’re using a [computed property name](https://tylermcginnis.com/computed-property-names/) for the property being based to `cx`. That’s because the className isn’t literally `\"long\"` it’s a value generated by CSS Modules and placed in the `long` variable.\n\n```jsx path=TreeView.js\nimport cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};\n```\n\nIf you need to target a global class not processed by CSS Modules, you can do so with the [global selector](https://github.com/css-modules/css-modules#exceptions).\n\n```scss\n:global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n```\n\n## VS Code\n\nTo get linting error feedback while writing javascript and SCSS in VS Code, install the [stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint) and [ESlint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extensions. We use ESLint’s Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a `.vscode/settings.json` in the root of your project\n\n```json path=.vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n```\n\nTo lint the entire project and get errors in your `Problems` tray, you can add the following to a `.vscode/tasks.json` file in the root of your project. You can run these tasks with `cmd+shift+d`\n\n```json path=.vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n## Test pages\n\nIf you want to add examples of what you are working on or see changes you’ve made, you can add an MDX file to `packages/src/pages/test` that will be visible at `(your-server-name)/test/(added-file)` during development. If you do add a page to the `/test` directory, update the below list with the file you added and its purpose to be included with your pull request.\n\n- [`Spacing audit`](/test/spacing-audit): use this page to test spacing around components when combined in common patterns.\n\n## Publishing\n\n1. figure out if it’s patch or feature\n2. from the root of the package run `lerna publish patch` or `lerna publish minor`\n3. git push upstream master --follow-tags\n4. In the project’s [release tab](https://github.com/carbon-design-system/gatsby-theme-carbon/releases), edit the new release to include a summary of new changes\n","type":"Mdx","contentDigest":"b9ac3907689e8159192e3bdb38af80c0","owner":"gatsby-plugin-mdx","counter":351},"frontmatter":{"title":"Contributions","description":"Instructions for developing and contributing to the theme"},"exports":{},"rawBody":"---\ntitle: Contributions\ndescription: Instructions for developing and contributing to the theme\n---\n\n<PageDescription>\n\nUse this guide to contribute to the theme. We’ll show you how to get the development environment set up as quickly as possible so you can start contributing.\n\n</PageDescription>\n\n<AnchorLinks>\n  <AnchorLink>Project setup</AnchorLink>\n  <AnchorLink>Development</AnchorLink>\n  <AnchorLink>Work in a branch</AnchorLink>\n  <AnchorLink>Sass and CSS Modules</AnchorLink>\n  <AnchorLink>VS Code</AnchorLink>\n  <AnchorLink>Test pages</AnchorLink>\n  <AnchorLink>Publishing</AnchorLink>\n</AnchorLinks>\n\n## Project setup\n\n1. Go to [gatsby-theme-carbon](https://github.com/carbon-design-system/gatsby-theme-carbon) and click the `Fork` button in the top-right corner.\n\n1. After it’s finished, click on the `Clone or Download` button and copy the contents.\n\n1. In your terminal, clone the repo into your directory of choice\n\n   ```sh\n   git clone [PASTE_URL_HERE]\n   cd gatsby-theme-carbon\n   ```\n\n1. When you clone your forked repo the `origin` is set to your fork by default. You’ll want to add a remote that points to the upstream repo.\n\n   ```sh\n   git remote add upstream git@github.com:carbon-design-system/gatsby-theme-carbon.git\n   ```\n\n1. In your terminal, verify that the remotes have been set\n\n   ```sh\n   git remote -v\n   ```\n\n## Development\n\nWe use [yarn](https://yarnpkg.com/lang/en/docs/install/) and yarn workspaces to develop the Carbon Gatsby theme. This allows us to have a development environment that’s closely linked to the theme with minimal setup. Run `yarn install` to install all of the projects dependencies.\n\nThis project has two packages: the actual theme package (`gatsby-theme-carbon`) and the `example` package. The example package emulates a project which uses the theme. Its only dependencies are Gatsby, React, and the adjacent theme package. The `example` package also serves as the theme’s documentation and [website](https://gatsby-theme-carbon.now.sh); it’s deployed on every merge to master.\n\nNew theme development will happen in the theme package while documentation and testing of that change will occur through changes in the example directory.\n\n<Title>Development scripts</Title>\n\n- `yarn dev` – start the development environment\n- `yarn dev:clean` – clear cache and restart dev\n- `yarn format` – format your code with prettier\n- `yarn lint` - check for errors in your javascript\n- `yarn test:prefix` – build and serve with a path prefix\n\n## Work in a branch\n\nYou should always start a new project by pulling upstream changes into master and then creating a new branch. This workflow ensures you don’t accidentally commit anything to your master branch and get stuck when trying to open a pull request.\n\n```sh\ngit checkout master\ngit pull upstream master\ngit checkout -b my-branch-name\n```\n\nWhen you’re ready to open a pull request, push to your origin remote.\n\n```sh\ngit push origin my-branch-name\n```\n\nYou’ll get a message in your terminal with a URL to open up a pull request in the upstream repository. Navigate to that URL and be sure to give a detailed summary of your pull request in the title and body section of the form.\n\n## Sass and CSS Modules\n\nFor internal theme components we use [Sass](https://sass-lang.com/documentation/syntax) and [CSS Modules](https://github.com/css-modules/css-modules#css-modules). This allows us to take advantage of the Carbon Design System resources while not worrying about className collisions. By default, each `.scss` file will be supplied with all of the Carbon Sass [variables](https://github.com/carbon-design-system/carbon/blob/master/packages/components/src/globals/scss/_vars.scss): color, spacing, theme, and motion, as well as type and layout mixins, are imported automatically.\n\nYou should colocate your stylesheet with the component(s) that import it. If the component is `TreeView` then the stylesheet should be `TreeView.module.scss`. All contained within the `TreeView` directory.\n\n### CSS Modules\n\nYou don’t need to prefix your classes as CSS Modules will generate unique class names for you. Import the class from the `.scss` file.\n\n```scss path=TreeView.module.scss\n.treeView {\n  color: $text-01;\n}\n```\n\n```jsx path=TreeView.js\nimport { treeView } from './style.css';\n\nconst TreeView = props => <div className={treeView} />;\n```\n\nFor conditionally applying class names, use the `classname` library. Note how we’re using a [computed property name](https://tylermcginnis.com/computed-property-names/) for the property being based to `cx`. That’s because the className isn’t literally `\"long\"` it’s a value generated by CSS Modules and placed in the `long` variable.\n\n```jsx path=TreeView.js\nimport cx from 'classname';\nimport { treeView, long } from './style.css';\n\nconst TreeView = props => {\n  const className = cx(treeView, {\n    [long]: props.long,\n  });\n  const TreeView = props => <div className={className} />;\n};\n```\n\nIf you need to target a global class not processed by CSS Modules, you can do so with the [global selector](https://github.com/css-modules/css-modules#exceptions).\n\n```scss\n:global(.bx--grid) .codeBlock {\n  @include carbon--type-style('code-01');\n}\n```\n\n## VS Code\n\nTo get linting error feedback while writing javascript and SCSS in VS Code, install the [stylelint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint) and [ESlint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) extensions. We use ESLint’s Prettier rules to format and lint all of our JavaScript in one pass. To get your code to format properly on save, add the following to a `.vscode/settings.json` in the root of your project\n\n```json path=.vscode/settings.json\n{\n  \"editor.formatOnSave\": true,\n  \"[javascript]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"[javascriptreact]\": {\n    \"editor.formatOnSave\": false\n  },\n  \"eslint.autoFixOnSave\": true,\n  \"prettier.disableLanguages\": [\"javascript\", \"javascriptreact\"]\n}\n```\n\nTo lint the entire project and get errors in your `Problems` tray, you can add the following to a `.vscode/tasks.json` file in the root of your project. You can run these tasks with `cmd+shift+d`\n\n```json path=.vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:js\",\n      \"problemMatcher\": \"$eslint-stylish\"\n    },\n    {\n      \"type\": \"npm\",\n      \"script\": \"lint:scss\",\n      \"problemMatcher\": {\n        \"owner\": \"stylelint\",\n        \"fileLocation\": [\"relative\", \"${workspaceFolder}\"],\n        \"pattern\": [\n          {\n            \"regexp\": \"^([^\\\\s].*)$\",\n            \"file\": 1\n          },\n          {\n            \"regexp\": \"^\\\\s+(\\\\d+):(\\\\d+)\\\\s+(✖|warning)\\\\s+(.*)\\\\s\\\\s+(.*)$\",\n            \"line\": 1,\n            \"column\": 2,\n            \"severity\": 3,\n            \"message\": 4,\n            \"code\": 5,\n            \"loop\": true\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n## Test pages\n\nIf you want to add examples of what you are working on or see changes you’ve made, you can add an MDX file to `packages/src/pages/test` that will be visible at `(your-server-name)/test/(added-file)` during development. If you do add a page to the `/test` directory, update the below list with the file you added and its purpose to be included with your pull request.\n\n- [`Spacing audit`](/test/spacing-audit): use this page to test spacing around components when combined in common patterns.\n\n## Publishing\n\n1. figure out if it’s patch or feature\n2. from the root of the package run `lerna publish patch` or `lerna publish minor`\n3. git push upstream master --follow-tags\n4. In the project’s [release tab](https://github.com/carbon-design-system/gatsby-theme-carbon/releases), edit the new release to include a summary of new changes\n","fileAbsolutePath":"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/src/pages/contributions.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2203542295","2746626797","3037994772","559098832","768070550"]}