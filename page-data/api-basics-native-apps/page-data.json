{
    "componentChunkName": "component---src-pages-api-basics-native-apps-mdx",
    "path": "/api-basics-native-apps/",
    "result": {"pageContext":{"frontmatter":{"title":"Native app support","description":"Native app support"},"relativePagePath":"/api-basics-native-apps.mdx","titleType":"page","MdxNode":{"id":"ff27ebd4-a35e-5409-a6d9-ba1547b533b1","children":[],"parent":"26a42518-23fc-576c-b9c9-ab9c96a5e4c7","internal":{"content":"---\ntitle: Native app support\ndescription: Native app support\n---\n\n## Overview\n\nNative and mobile apps cannot store secrets in a secure way. Consequently, it’s not recommended to use the standard\nauthorization code flow, since it requires a client secret when exchanging the authorization code for an access token\non the token endpoint. By selecting the “Native application” option on the IBM Video Streaming dashboard, PKCE\n(https://tools.ietf.org/html/rfc7636) protocol can be forced to secure the authorization flow. PKCE is a technique for public\nclients to mitigate the threat of having the authorization code intercepted. Clients need to create a secret, then use\nthat secret again when exchanging the authorization code for an access token. This way if the code is intercepted,\nby a malicious application it won’t be able to use it because the token request relies on the initial secret.\n\n### Generate a code verifier and code challenge\n\nApps must generate a unique code verifier for every authorization request. This value must be transformed to a\n`code_challenge`, which is sent to the authorization server to obtain the authorization code.\nA `code_verifier` is a high-entropy cryptographic random string using the unreserved characters\n`[A-Z]` / `[a-z]` / `[0-9]` / `-` / `.` / `_` / `~`, with a minimum length of 43 characters and a maximum length of 128 characters.\nThe code verifier should have enough entropy to make it impractical to guess the value.\n\n<Title>Supported methods for generating a code challenge</Title>\n\n| METHOD  | DESCRIPTION                                                                                                                                                         |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `plain` | The code challenge is the same value as the code verifier generated above. `code_challenge` = `code_verifier`                                                       |\n| `S256`  | The code challenge is the Base64URL (without padding) encoded SHA256 hash of the code verifier. `code_challenge` = `BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))` |\n\n### Send a request to the auth server\n\nTo obtain user authorization, send a request to the authorization server at https://authentication.video.ibm.com/authorize. This endpoint handles active session lookup, authenticates the user, and obtains user consent.\nThe authorization server supports the following additional query string parameters for installed applications:\n\n| PARAMETER               | IMPORTANCE | DESCRIPTION                                                                                                          |\n| ----------------------- | ---------- | -------------------------------------------------------------------------------------------------------------------- |\n| `code_challenge`        | REQUIRED   | Specifies an encoded `code_verifier` that will be used as a server-side challenge during authorization code exchange |\n| `code_challenge_method` | OPTIONAL   | Defaults to `plain`. Must be used with `code_challenge`. Supported values: `plain`, `S256`                           |\n\n### Exchange authorization code for refresh and access tokens\n\nTo exchange an authorization code for an access token, call the token endpoint (https://video.ibm.com/oauth2/token) and set the following parameters:\n\n| PARAMETER       | TYPE   | IMPORTANCE | DESCRIPTION                                                                            |\n| --------------- | ------ | ---------- | -------------------------------------------------------------------------------------- |\n| `grant_type`    | string | REQUIRED   | MUST be `authorization_code` in this case.                                             |\n| `client_id`     | string | REQUIRED   | 40-character long string, provided by IBM Video Streaming                              |\n| `code`          | string | REQUIRED   | The authorization code received from the authorization endpoint                        |\n| `code_verifier` | string | REQUIRED   | Code verifier that has been created                                                    |\n| `redirect_uri`  | string | REQUIRED   | The redirect URI used by the authorization server to return the authorization response |\n\n#### Example\n\nThe following is an example with the authorization code flow using PKCE.\n\n1 - The client opens a browser with the authorization endpoint:\n\n```\nhttps://authentication.video.ibm.com/authorize\n?response_type=code\n&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD\n&redirect_uri=https://example.com/get_auth_code\n&scope=broadcaster\n&state=XYZ\n&code_challenge=bWl6dQ\n&code_challenge_method=S256\n```\n\n2 - The user enters his/her credentials and presses the Allow button. The browser is redirected to the following URL:\n\n```\nhttp://example.com/get_access_token?code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&state=XYZ\n```\n\n3 - The page handler at http://example.com/get_access_token retrieves the Access Token using the Token Endpoint:\n\n```\nPOST /oauth2/token HTTP/1.1\nHost: video.ibm.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD&code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&redirect_uri=http://example.com/get_access_token&code_verifier=asdf\n```\n\n4 - The response of the Token Endpoint contains the access token:\n\n```\nHTTP/1.1 200 OK\nCache-Control: no-store\nContent-Type:application/json; charset=UTF-8\n\n{\"access_token\":\"ab345cdef123ef1267890abcdef04567890abcd1\",\"refresh_token\":\"cb345cdef123ef1267890abcdef04567890abcd1\",\"token_type\":\"bearer\", \"expires_in\":86400}\n```\n","type":"Mdx","contentDigest":"578bd51d06ea0e6139297663a236c9ec","owner":"gatsby-plugin-mdx","counter":333},"frontmatter":{"title":"Native app support","description":"Native app support"},"exports":{},"rawBody":"---\ntitle: Native app support\ndescription: Native app support\n---\n\n## Overview\n\nNative and mobile apps cannot store secrets in a secure way. Consequently, it’s not recommended to use the standard\nauthorization code flow, since it requires a client secret when exchanging the authorization code for an access token\non the token endpoint. By selecting the “Native application” option on the IBM Video Streaming dashboard, PKCE\n(https://tools.ietf.org/html/rfc7636) protocol can be forced to secure the authorization flow. PKCE is a technique for public\nclients to mitigate the threat of having the authorization code intercepted. Clients need to create a secret, then use\nthat secret again when exchanging the authorization code for an access token. This way if the code is intercepted,\nby a malicious application it won’t be able to use it because the token request relies on the initial secret.\n\n### Generate a code verifier and code challenge\n\nApps must generate a unique code verifier for every authorization request. This value must be transformed to a\n`code_challenge`, which is sent to the authorization server to obtain the authorization code.\nA `code_verifier` is a high-entropy cryptographic random string using the unreserved characters\n`[A-Z]` / `[a-z]` / `[0-9]` / `-` / `.` / `_` / `~`, with a minimum length of 43 characters and a maximum length of 128 characters.\nThe code verifier should have enough entropy to make it impractical to guess the value.\n\n<Title>Supported methods for generating a code challenge</Title>\n\n| METHOD  | DESCRIPTION                                                                                                                                                         |\n| ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `plain` | The code challenge is the same value as the code verifier generated above. `code_challenge` = `code_verifier`                                                       |\n| `S256`  | The code challenge is the Base64URL (without padding) encoded SHA256 hash of the code verifier. `code_challenge` = `BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))` |\n\n### Send a request to the auth server\n\nTo obtain user authorization, send a request to the authorization server at https://authentication.video.ibm.com/authorize. This endpoint handles active session lookup, authenticates the user, and obtains user consent.\nThe authorization server supports the following additional query string parameters for installed applications:\n\n| PARAMETER               | IMPORTANCE | DESCRIPTION                                                                                                          |\n| ----------------------- | ---------- | -------------------------------------------------------------------------------------------------------------------- |\n| `code_challenge`        | REQUIRED   | Specifies an encoded `code_verifier` that will be used as a server-side challenge during authorization code exchange |\n| `code_challenge_method` | OPTIONAL   | Defaults to `plain`. Must be used with `code_challenge`. Supported values: `plain`, `S256`                           |\n\n### Exchange authorization code for refresh and access tokens\n\nTo exchange an authorization code for an access token, call the token endpoint (https://video.ibm.com/oauth2/token) and set the following parameters:\n\n| PARAMETER       | TYPE   | IMPORTANCE | DESCRIPTION                                                                            |\n| --------------- | ------ | ---------- | -------------------------------------------------------------------------------------- |\n| `grant_type`    | string | REQUIRED   | MUST be `authorization_code` in this case.                                             |\n| `client_id`     | string | REQUIRED   | 40-character long string, provided by IBM Video Streaming                              |\n| `code`          | string | REQUIRED   | The authorization code received from the authorization endpoint                        |\n| `code_verifier` | string | REQUIRED   | Code verifier that has been created                                                    |\n| `redirect_uri`  | string | REQUIRED   | The redirect URI used by the authorization server to return the authorization response |\n\n#### Example\n\nThe following is an example with the authorization code flow using PKCE.\n\n1 - The client opens a browser with the authorization endpoint:\n\n```\nhttps://authentication.video.ibm.com/authorize\n?response_type=code\n&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD\n&redirect_uri=https://example.com/get_auth_code\n&scope=broadcaster\n&state=XYZ\n&code_challenge=bWl6dQ\n&code_challenge_method=S256\n```\n\n2 - The user enters his/her credentials and presses the Allow button. The browser is redirected to the following URL:\n\n```\nhttp://example.com/get_access_token?code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&state=XYZ\n```\n\n3 - The page handler at http://example.com/get_access_token retrieves the Access Token using the Token Endpoint:\n\n```\nPOST /oauth2/token HTTP/1.1\nHost: video.ibm.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&client_id=AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDD&code=19d8dbb3ebac55f110c3b526e38bcfdfbf46d659&redirect_uri=http://example.com/get_access_token&code_verifier=asdf\n```\n\n4 - The response of the Token Endpoint contains the access token:\n\n```\nHTTP/1.1 200 OK\nCache-Control: no-store\nContent-Type:application/json; charset=UTF-8\n\n{\"access_token\":\"ab345cdef123ef1267890abcdef04567890abcd1\",\"refresh_token\":\"cb345cdef123ef1267890abcdef04567890abcd1\",\"token_type\":\"bearer\", \"expires_in\":86400}\n```\n","fileAbsolutePath":"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/src/pages/api-basics-native-apps.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2203542295","2746626797","3037994772","559098832","768070550"]}