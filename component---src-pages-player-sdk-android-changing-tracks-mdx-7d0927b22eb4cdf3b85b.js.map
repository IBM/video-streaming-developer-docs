{"version":3,"file":"component---src-pages-player-sdk-android-changing-tracks-mdx-7d0927b22eb4cdf3b85b.js","mappings":"4LAOsBA,E,4DADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAImB,qBAJX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5BM,EAAAA,EAAAA,IAAA,MAASH,EAClB,GAEMI,EAAc,CAClBN,aAAAA,GAEIO,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGT,GAAKU,EAAAA,EAAAA,GAAAF,EAAAG,GAER,OAAOR,EAAAA,EAAAA,IAACE,EAASO,OAAAC,OAAA,GAAKT,EAAiBJ,EAAK,CAAES,WAAYA,EAAYK,QAAQ,eAG5EX,EAAAA,EAAAA,IAACJ,EAAkB,CAACgB,KAAK,UAAUD,QAAQ,uBACzCX,EAAAA,EAAAA,IAAA,0aAAoaA,EAAAA,EAAAA,IAAA,KAAGa,WAAW,IAC9a,KAAQ,kEAAgE,yBAC1C,iFAAiFb,EAAAA,EAAAA,IAAA,KAAGa,WAAW,IAC7H,KAAQ,0BAAwB,iBACV,oCAE5Bb,EAAAA,EAAAA,IAAA,mPACiEA,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,4BAA0C,6DACrIb,EAAAA,EAAAA,IAAA,oBACAA,EAAAA,EAAAA,IAAA,WACEA,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,UAAWb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,4BAA0C,oCAAoCb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,YAA0B,uBAC5Lb,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,oGACkBb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,qEAAmF,eACnJb,EAAAA,EAAAA,IAAA,MAAIa,WAAW,MAAI,QAASb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,MAAI,oBAAkC,0LAG3Fb,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,UAAQa,WAAW,KAAG,WAAqB,mDAC9Cb,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMa,WAAW,MAClB,UAAa,iBAAe,2yBAmBhCb,EAAAA,EAAAA,IAAA,UAAGA,EAAAA,EAAAA,IAAA,UAAQa,WAAW,KAAG,WAAqB,yBAAyBb,EAAAA,EAAAA,IAAA,cAAYa,WAAW,KAAG,eAA6B,kBAC9Hb,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMa,WAAW,MAClB,UAAa,iBAAe,0gBAchCb,EAAAA,EAAAA,IAAA,2FAGJ,CAEAI,EAAWU,gBAAiB,C","sources":["webpack://example/./src/pages/player-sdk-android/changing-tracks.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification kind=\"warning\" mdxType=\"InlineNotification\">\n      <p>{`Please note that as of November 1st, 2022 IBM has discontinued support for the Video Streaming Player SDK. It will not receive updates or technical support and may not fully function. For SDKs you have already downloaded, please do not use them to build applications and delete them from your archives. You may find information for alternative methods to create customized viewer experiences with our APIs on our `}<a parentName=\"p\" {...{\n          \"href\": \"https://developers.video.ibm.com/player-api-examples/custom-ui\"\n        }}>{`Developer Tools pages`}</a>{`. Users may also continue to access Video Streaming through the web, both at `}<a parentName=\"p\" {...{\n          \"href\": \"https://video.ibm.com/\"\n        }}>{`video.ibm.com`}</a>{` and through Embedded modules.`}</p>\n    </InlineNotification>\n    <p>{`Video streams can contain multiple tracks of different types (usually video, audio and text such as for captions). The Player SDK lets you control which of these\ntracks are selected and presented to the user. See this document’s `}<inlineCode parentName=\"p\">{`MediaTrackChangeListener`}</inlineCode>{` section or the corresponding javadoc for API reference.`}</p>\n    <h2>{`Usage`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Set a `}<inlineCode parentName=\"li\">{`MediaTrackChangeListener`}</inlineCode>{` on an initialized player, call `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode>{` when appropriate.`}</li>\n      <li parentName=\"ul\">{`When the player determines the available track groups\nit will report it through the listener’s `}<inlineCode parentName=\"li\">{`void onMediaTracksChanged(MediaTrackGroupHolder mediaTrackGroups)`}</inlineCode>{` callback.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`mediaTrackGroups`}</inlineCode>{` object holds the available media tracks for each track type. Use these to instruct the player’s specific renderers to\nplay a certain media track. A renderer can also be disabled.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`: Selecting a subtitle / closed captions track`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`PlayerFactory playerFactory = new PlayerFactory(RegionalCluster.WORLD_WIDE, API_KEY, activity);\nContentDescriptor contentDescriptor = new ContentDescriptor(ContentType.RECORDED, 123456L);\nPlayer player = playerFactory.createPlayer(contentDescriptor.toString());\nplayer.initWithContent(contentDescriptor);\nplayer.setMediaTracksChangeListener(mediaTrackChangeListener);\nplayer.attach();\n\n//... Inside the MediaTrackChangeListener\npublic void onMediaTracksChanged(MediaTrackGroupHolder mediaTrackGroups) {\n    availableTextTracks = trackGroupHolder.textTracks;\n    // Update the subtitle selector with the available subtitles\n}\n\n//... When the user selects a subtitle track from the selector:\nvoid selectTrack(MediaTrack mediaTrack) {\n    player.selectTrackForRenderer(mediaTracks, null);\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`: Querying whether a `}<inlineCode parentName=\"p\">{`MediaFormat`}</inlineCode>{` is supported`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//... Inside the MediaTrackChangeListener\npublic void onMediaTracksChanged(MediaTrackGroupHolder mediaTrackGroups) {\n    for (MediaTrack videoTrack : mediaTrackGroups.videoTracks) {\n        for (MediaFormat videoFormat : videoTrack.mediaFormats) {\n            if (mediaTrackGroups.formatSupportInfo.isSupported(videoFormat)) {\n                logSupportedFormat(videoTrack, videoFormat);\n            } else {\n                logUnsupportedFormat(videoTrack, videoFormat);\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`For more detailed and general examples please consult the provided sample app.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineNotification","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutPropertiesLoose","_excluded","Object","assign","mdxType","kind","parentName","isMDXComponent"],"sourceRoot":""}